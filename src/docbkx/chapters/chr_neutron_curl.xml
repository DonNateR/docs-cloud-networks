<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % common  SYSTEM "../../common/common.ent">
%common;
]>
<section xml:id="chr_neutron_curl" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:raxm="http://docs.rackspace.com/api/metadata" version="5.0">
    <title>Configure host routes with cURL</title>
    <para>These sections walk you through configuring host routes by using cURL.</para>
    <sidebar>
        <para><emphasis role="bold">Start here: </emphasis><olink targetdoc="cn-gettingstarted"
                targetptr="neutron_create_network_chr_curl">“Create a network (cURL)”</olink></para>
    </sidebar>

    <section xml:id="neutron_create_network_chr_curl">
        <title>Create a network (cURL)</title>
        <para>After you create a network, copy its network ID. You use this ID to create a subnet and boot the server.</para>
        <procedure>
            <title>To create a network</title>
            <step>
                <para>Issue the following cURL command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            <prompt>$</prompt> curl -s https://dfw.networks.api.rackspacecloud.com/v2.0/networks \
       -X POST \
       -H "Content-Type: application/json" \
       -H "User-Agent: python-novaclient" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $token" \
       -d '{"network": {"name": "Rackernet"}}' | python -m json.tool</programlisting></para>
                <para>In this cURL command, you specify several options. For information about options, see <olink
                        targetdoc="cn-gettingstarted" targetptr="curl_options">Table 2, “cURL Command-Line
                    Options”</olink>.</para>
                <para>The operation returns the response body, as shown in the following example:
                    <programlisting language="json"><?db-font-size 65%?>
{
   "network":{
        "admin_state_up": null,
        "id": "a8fde776-e80f-47bb-a050-0c057d89afc3",
        "name": "RackerNet",
        "shared": false,
        "status": "ACTIVE",
        "subnets": [],
        "tenant_id": "5831008"
   }
}
                            </programlisting></para>
            </step>
            <step>
                <para>Copy the <literal>id</literal> value from the output. You will use this value when you create a subnet,
                    provision your server, or perform other related activities. In this example, the ID is
                        <literal>a8fde776-e80f-47bb-a050-0c057d89afc3</literal>, but use the ID from your response.</para>
            </step>
        </procedure>
        <sidebar>
            <para><emphasis role="bold">Next step: </emphasis><olink targetdoc="cn-gettingstarted"
                    targetptr="neutron_create_subnet_chr_curl">“Create a subnet with host routes (cURL)”</olink></para>
        </sidebar>
    </section>

    <section xml:id="neutron_create_subnet_chr_curl">
        <title>Create a subnet with host routes (cURL)</title>
        <para>To create a subnet with host routes, you specify a network, an IP address, allocation pools, and host routes
            for your subnet.</para>
        <procedure>
            <title>To create a subnet with host routes</title>
            <step>
                <para>Issue the following cURL command, substituting your own values for the ones shown:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            <prompt>$</prompt> curl -s https://dfw.networks.api.rackspacecloud.com/v2.0/subnets \
       -X POST \
       -H "Content-Type: application/json" \
       -H "User-Agent: python-novaclient" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $token" \
       -d '{"subnet":
    {
        "network_id": "a8fde776-e80f-47bb-a050-0c057d89afc3",
        "ip_version": 4,
        "cidr": "192.168.5.0/24",
        "gateway_ip": null,
        "allocation_pools": [
            {
                "end": "192.168.5.100",
                "start": "192.168.5.3"
            },
            {
                "end": "192.168.5.254",
                "start": "192.168.5.103"
            }
        ],
        "host_routes": [
            {
                "destination": "1.1.1.0/24",
                "nexthop": "192.168.5.254"
            }
        ],
        "tenant_id": "5831008"}}' | python -m json.tool</programlisting></para>
                <para>In this cURL command, you specify several options. For information about the options, see <olink
                        targetdoc="cn-gettingstarted" targetptr="curl_options">Table 2, “cURL Command-Line
                    Options”</olink>.</para>
                <para>The operation returns the response body, as shown in the following example:
                    <programlisting language="json"><?db-font-size 65%?>
{
   "subnet":
      {
        "allocation_pools": [
            {
                "end": "192.168.5.100",
                "start": "192.168.5.3"
            },
            {
                "end": "192.168.5.254",
                "start": "192.168.5.103"
            }
        ],
        "cidr": "192.168.5.0/24",
        "dns_nameservers": [],
        "enable_dhcp": false,
        "gateway_ip": null,
        "host_routes": [
            {
                "destination": "1.1.1.0/24",
                "nexthop": "192.168.5.254"
            }
        ],
        "id": "98c1af30-05c9-4502-8b1f-9bffde843cba",
        "ip_version": 4,
        "name": "",
        "network_id": "a8fde776-e80f-47bb-a050-0c057d89afc3",
        "tenant_id": "5831008"
     }
}
                            </programlisting></para>
            </step>
            <step>
                <para>Note the host_routes attribute with the destination of <literal>1.1.1.0/24</literal> and the nexthop of
                        <literal>192.168.5.254</literal>.</para>
            </step>
        </procedure>
        <sidebar>
            <para><emphasis role="bold">Next step: </emphasis><olink targetdoc="cn-gettingstarted"
                    targetptr="neutron_boot_server_chr_curl">“Boot Server (cURL)”</olink></para>
        </sidebar>
    </section>

    <section xml:id="neutron_boot_server_chr_curl">
        <title>Boot a Server (cURL)</title>
        <para>Boot a server by using the network ID from the network that you created in the first step of this
            procedure.</para>
        <procedure>
            <title>To boot a server</title>
            <step>
                <para>Issue the following cURL command, substituting your own values for the ones shown:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        <prompt>$</prompt> curl https://dfw.servers.api.rackspacecloud.com/v2.0/$account/servers \
       -X POST \
       -H "Content-Type: application/json" \
       -H "User-Agent: python-novaclient" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $token" \
       -d '{"server":
            "name": "ata",
            "imageRef": "ffa476b1-9b14-46bd-99a8-862d1d94eb7a",
            "flavorRef": "2",
            "max_count": 1,
            "min_count": 1,
            "networks": [{"uuid": "00000000-0000-0000-0000-000000000000"}, {"uuid": "11111111-1111-1111-1111-111111111111"}, {"uuid":"a8fde776-e80f-47bb-a050-0c057d89afc3"} ]
        }} | python -m json.tool</programlisting></para>
                <para>The operation returns the response body as shown in the following example:
                    <programlisting language="json"><?db-font-size 75%?>
{
    "server": {
        "OS-DCF:diskConfig": "AUTO",
        "id": "a1061a57-0136-4c29-aac1-8b1a646a3001",
        "links": [
            {"href": "https://dfw.servers.api.rackspacecloud.com/v2/5831008/servers/a1061a57-0136-4c29-aac1-8b1a646a3001", "rel": "self"},
            {"href": "https://dfw.servers.api.rackspacecloud.com/5831008/servers/a1061a57-0136-4c29-aac1-8b1a646a3001", "rel": "bookmark"}
        ],
        "adminPass": "ugZmn5Le6S8y"
    }
}
                        </programlisting>
                </para>
            </step>
            <step>
                <para>Copy the <literal>id</literal> value from the output for future reference. In this example, the ID is
                        <literal>a1061a57-0136-4c29-aac1-8b1a646a3001</literal>, but use the ID from your response.</para>
            </step>
        </procedure>
        <sidebar>
            <para><emphasis role="bold">Next step: </emphasis><olink targetdoc="cn-gettingstarted"
                    targetptr="neutron_verify_ip_chr_curl">Verify the IP on the server port (cURL)</olink></para>
        </sidebar>
    </section>

    <section xml:id="neutron_verify_ip_chr_curl">
        <title>Verify the IP on the server port (cURL)</title>
        <para>The following step shows you how to verify the IP address on the server port.</para>
        <procedure>
            <title>To verify the port IP address</title>
            <step>
                <para>Issue the following cURL command, substituting your own values for the ones shown:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        <prompt>$</prompt> curl -k https://dfw.servers.api.rackspacecloud.com/v2.0/$account/servers/a1061a57-0136-4c29-aac1-8b1a646a3001  \
        -X GET
        -H "Content-Type: application/json" \
        -H "User-Agent: python-novaclient" \
        -H "Accept: application/json" \
        -H "X-Auth-Token: $token" | python -m json.tool</programlisting></para>
                <para>The operation returns the response body as shown in the following example:
                    <programlisting language="json"><?db-font-size 75%?>
{
    "server": 
    {
        "OS-DCF:diskConfig": "AUTO",
        "OS-EXT-STS:power_state": 1,
        "OS-EXT-STS:task_state": null,
        "OS-EXT-STS:vm_state": "active",
        "accessIPv4": "10.23.233.124",
        "accessIPv6": "2001:4801:787f:205:bccb:feff:fe00:189",
        "addresses": {
            "RackerNet": [
                {
                    "addr": "192.168.5.3",
                    "version": 4
                }
            ],
            "private": [
                {
                    "addr": "10.181.192.114",
                    "version": 4
                }
            ],
            "public": [
                {
                    "addr": "10.23.233.124",
                    "version": 4
                },
                {
                    "addr": "2001:4801:787f:205:bccb:feff:fe00:189",
                    "version": 6
                }
            ]
        },
        "config_drive": "",
        "created": "2014-09-29T05:50:53Z",
        "flavor": {
            "id": "2",
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/5831008/flavors/2",
                    "rel": "bookmark"
                }
            ]
        },
        "hostId": "0488142a8f859cb4020234cc235f8cd8a22bee126726025d70c0b9ba",
        "id": "a1061a57-0136-4c29-aac1-8b1a646a3001",
        "image": {
            "id": "ffa476b1-9b14-46bd-99a8-862d1d94eb7a",
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/5831008/images/ffa476b1-9b14-46bd-99a8-862d1d94eb7a",
                    "rel": "bookmark"
                }
            ]
        },
        "key_name": null,
        "links": [
            {
                "href": "https://dfw.servers.api.rackspacecloud.com/v2/5831008/servers/a1061a57-0136-4c29-aac1-8b1a646a3001",
                "rel": "self"
            },
            {
                "href": "https://dfw.servers.api.rackspacecloud.com/5831008/servers/a1061a57-0136-4c29-aac1-8b1a646a3001",
                "rel": "bookmark"
            }
        ],
        "metadata": {},
        "name": "ata",
        "progress": 100,
        "status": "ACTIVE",
        "tenant_id": "5831008",
        "updated": "2014-09-29T05:52:19Z",
        "user_id": "207638"
    }
}
                        </programlisting>
                </para>
                <para>Note the IP address on the <literal>public</literal> interface (in this case,
                        <literal>10.23.233.124</literal>). Use this to log in to the server in the next step.</para>
            </step>
        </procedure>
        <sidebar>
            <para><emphasis role="bold">Next step: </emphasis><olink targetdoc="cn-gettingstarted"
                    targetptr="neutron_verify_route_chr_sshcurl">Log in to the server and verify the route
                (ssh)</olink></para>
        </sidebar>
    </section>

    <section xml:id="neutron_verify_route_chr_sshcurl">
        <title>Log in to the server and verify the route (ssh)</title>
        <para>The following steps show you how to log in to the server and verify that the host route is configured correctly
            by using the command line.</para>
        <procedure>
            <title>To log in to the server and verify the host route</title>
            <step>
                <para>Issue the following command at the prompt, substituting your own values for the ones shown:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        <prompt>$</prompt> ssh root@10.23.233.124</programlisting></para>
                <para>The command returns output like the following example:
                    <programlisting language="bash"><?db-font-size 75%?>
The authenticity of host '10.23.233.124 (10.23.233.124)' can't be established.
RSA key fingerprint is 87:b6:8f:7a:44:80:a4:58:f8:9b:09:82:d4:b0:f9:bf.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '10.23.233.124' (RSA) to the list of known hosts.
root@10.23.233.124's password:
                    </programlisting>
                </para>
            </step>
            <step>
                <para>Enter your password when prompted.</para>
            </step>
            <step>
                <para>Issue the following command at the prompt:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        <prompt>root@ata:~#</prompt> route</programlisting>
                </para>
                <para>The command returns output like the following example:
                    <programlisting language="bash"><?db-font-size 75%?>
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
default 10.23.233.1 0.0.0.0 UG 100 0 0 eth0
1.1.1.0 192.168.5.254 255.255.255.0 UG 0 0 0 eth2
10.23.233.0 * 255.255.255.0 U 0 0 0 eth0
10.181.192.0 * 255.255.248.0 U 0 0 0 eth1
192.168.5.0 * 255.255.255.0 U 0 0 0 eth2
                    </programlisting>
                </para>
                <para>Notice the route <literal>1.1.1.0</literal> with Gateway <literal>192.168.5.254</literal> in the
                    preceding output. That is what was expected.</para>
            </step>
        </procedure>
        <sidebar>
            <para><emphasis role="bold">Next topic: </emphasis><olink targetdoc="cn-gettingstarted"
                    targetptr="provision_additional_ips">Provision additional IP address and dual-stack IP addresses on an
                    isolated network port</olink>
            </para>
        </sidebar>
    </section>
</section>
