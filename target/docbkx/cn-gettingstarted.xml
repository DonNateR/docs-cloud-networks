<?xml version="1.0" encoding="utf-8"?>
<?rax-warinfo networks-v2-cn-gettingstarted?>
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook"
      version="5.0"
      xml:id="cn-gettingstarted"
      xml:base="file:/Users/cath6136/Documents/GithubDocs/docs-cloud-networks/src/docbkx/cn-gettingstarted.xml">
    <title>Cloud Networks™ Getting Started</title>
    <?rax title.font.size="37px" pdf.url="../../cn-gettingstarted.pdf" canonical.url.base="http://docs.rackspace.com/servers/api/v2/cn-gettingstarted/content"?>
    <titleabbrev>Cloud Networks™ Getting Started</titleabbrev>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2012</year>
            <year>2013</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>OpenStack Networking API v2</releaseinfo>
        <productname>Cloud Networks™</productname>
        <pubdate>2014-04-03</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <para>
                    
                </para>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is for software developers who develop applications by using Rackspace Cloud Networks™, which
                is powered by the OpenStack Networking code base. In addition to the core features of the OpenStack
                Networking Application Programming Interface (API) v2, Rackspace has also deployed certain extensions as
                permitted by the OpenStack Networking API contract.</para>
        </abstract>
        <revhistory>
            <revision>
                <date>2014-03-14</date>
                <revdescription>
                    <para>Reorganized doc and added neutron api calls</para>
                </revdescription>
            </revision>
            <revision>
                <date>2014-02-17</date>
                <revdescription>
                    <para>Removed nova install from git instructions.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2014-02-13</date>
                <revdescription>
                    <para>Removed supernova install instructions and added supernova link to resources section.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-12-4</date>
                <revdescription>
                    <para>Updated the name for Managed Cloud Service Level</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-11-04</date>
                <revdescription>
                    <para>Published Performance server information, previously limited access. </para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-10-31</date>
                <revdescription>
                    <para>Fixed the link for requesting Cloud Networks access to
                        <link xlink:href="http://www.iwantcloudnetworks.com/">http://www.iwantcloudnetworks.com/</link>.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-09-26</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>updated examples for d2to1 in install and update nova client section.</para>
                        </listitem>
                        <listitem>
                            <para>removed v4-fixed-ip from <xref linkend="nova_provision_server"/>
                     </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2013-08-28</date>
                <revdescription>
                    <para>Removed references to bandwidth since the RAX extension is no longer implemented. It causes an
                        unsustainable load on Nova. See <xref linkend="list_servers"/>.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-06-26</date>
                <revdescription>
                    <para>Added Server Key Pairs nova commands.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-06-24</date>
                <revdescription>
                    <para>Added important note that user may choose any endpoint regardless of account origin.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-06-20</date>
                <revdescription>
                    <para>Updated link to supernova git repository</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-06-18</date>
                <revdescription>
                    <para>Removed optional parameters from nova_summary. </para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-06-17</date>
                <revdescription>
                    <para>Removed optional parameters, such as hint, block_device_mapping, availability_zone, and
                        security_groups, from <xref linkend="create_server_with_network"/>. </para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-05-23</date>
                <revdescription>
                    <para>Updated "control panel" to "Control Panel."</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-05-13</date>
                <revdescription>
                    <para>Added the Cloud Networks virtual interface extension, which enables you to create virtual interfaces for, list virtual interfaces
                        for, and delete virtual interfaces from existing server instances.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-03-26</date>
                <revdescription>
                    <para>Updated to add the list servers call, which lists servers and their attached networks.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-02-07</date>
                <revdescription>
                    <para>Corrected the JSON request to add missing slashes in <xref linkend="curl_create_network"/>.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2013-01-08</date>
                <revdescription>
                    <para>Updated the authentication section with additional information about the token
                        environment variable used in the cURL examples.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2012-12-14</date>
                <revdescription>
                    <para>Added a link for the json.tool:
                        <link xlink:href="http://docs.python.org/2/library/json.html">json — JSON encoder and decoder</link>.
                    </para>
                </revdescription>
            </revision>
            <revision>
                <!-- ... continue addding more revisions here as you change this document using the markup shown below... -->
                <date>2012-12-04</date>
                <revdescription>
                    <para>Corrected the <literal>NOVA_RACK_AUTH</literal> environment variable to
                            <literal>NOVA_RAX_AUTH</literal>.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2012-11-14</date>
                <revdescription>
                    <para>Updated formatting in PDF.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2012-11-07</date>
                <revdescription>
                    <para>Updated formatting of nova client and cURL examples.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2012-11-01</date>
                <revdescription>
                    <para>Fixed formatting problems in code examples.</para>
                </revdescription>
            </revision>
            <revision>
                <date>2012-10-31</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Fixed the link for requesting Cloud Networks access to
                                <link xlink:href="http://www.iwantcloudnetworks.com/">http://www.iwantcloudnetworks.com/</link>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Corrected an error in list_networks.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2012-10-30</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Cloud Networks phased-release launch.</para>
                        </listitem>
                        <listitem>
                            <para>First edition of this guide.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>

        </revhistory>
        <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>Getting Started Guide</raxm:displayname>
            <raxm:product version="v2">networks</raxm:product>
            <raxm:priority>50</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter version="5.0"
            xml:id="ch_preface"
            xml:base="chapters/net_preface.xml">
      <title>Preface</title>
      <para>Rackspace Cloud Networks enables you to create isolated networks and provision <glossterm>server</glossterm>
        instances with Rackspace networks or the isolated networks that you created. </para>
      <para>When you create an isolated network, it is associated with your tenant ID.</para>

      <para>Cloud Networks was originally released using the Cloud Servers Nova-network (see <olink targetdoc="cn-devguide" targetptr="api_operations_nova">API Operations - Nova</olink>). Now Cloud Networks has been released using
        Neutron (see <olink targetdoc="cn-devguide" targetptr="api_operations_nuetron">API Operations - Neutron</olink>).
        Both sets of API operations work. For information that helps you determine which method is better for you, see <olink targetdoc="cn-devguide" targetptr="section_nova_v_neutron">“Networking: Nova-network versus
        Neutron”</olink>.</para>
      <para>To request access to Cloud Networks now, click
        <link xlink:href="http://www.iwantcloudnetworks.com/">"I want Cloud Networks"</link>.</para>
      <para>To detect if you are enabled to use Cloud Networks, issue a <command>GET</command> 
         <command>/limits</command> call or a
            <command>nova absolute-limits</command> call and review the <literal>maxTotalPrivateNetworks</literal> value:
            <table xml:id="maxTotalPrivateNetworks" rules="all">
            <caption>maxTotalPrivateNetworks Value</caption>
            <col width="20%"/>
            <col width="80%"/>
            <thead>
                <tr>
                    <th>maxTotalPrivateNetworks Value</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>0</td>
                    <td>
                        <para>Cloud Networks is disabled.</para>
                    </td>
                </tr>
                <tr>
                    <td>Greater than 0</td>
                    <td>
                        <para>Cloud Networks is enabled. The value indicates the number of isolated networks that you are
                            allowed to create.</para>
                    </td>
                </tr>
            </tbody>
        </table>
      </para>
      <para>For more information about querying limits, see
        <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/ProgrammaticLimits.html">Get Limits</link>.</para>
      <para>We welcome feedback, comments, and bug reports. Login to the Rackspace customer portal at
        <link xlink:href="http://www.rackspace.com/support/">http://www.rackspace.com/support/</link>.</para>

      <section xml:id="Intended_Audience-d1e85">
        <title>Intended Audience</title>
        <para>This guide assists software developers who want to develop applications by using Cloud Servers and Cloud
            Networks. </para>
        <para>To use this information, you should have access to an active Rackspace Cloud Servers account and access to
            Cloud Networks. You should also be familiar with the following concepts: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>Cloud Servers service</para>
            </listitem>
            <listitem>
                <para>
                  <glossterm>RESTful</glossterm> web services</para>
            </listitem>
            <listitem>
                <para>
                  <glossterm>HTTP</glossterm>/1.1</para>
            </listitem>
            <listitem>
                <para>JSON or XML data serialization formats</para>
            </listitem>
        </itemizedlist>
      </section>

      <section version="5.0" xml:id="Pricing_SLA">
        <title>Pricing and Service Level</title>
        <para>Next generation Cloud Networks is part of the Rackspace Cloud and your use through the API is billed according
            to the pricing schedule for Cloud Servers at
            <link xlink:href="http://www.rackspace.com/cloud/servers/pricing/">http://www.rackspace.com/cloud/servers/pricing/</link>.</para>
        <para>The Service Level Agreement (SLA) for Cloud Networks, as part of Cloud Servers, is available at
            <link xlink:href="http://www.rackspace.com/cloud/servers/service-levels/">http://www.rackspace.com/cloud/servers/service-levels/</link>.</para>
      </section>

      <section xml:id="Document_Change_History">
        <title>Document Change History</title>
        <para> This version of the guide applies only to v3.0 of the API. The most recent changes are described in the
            following table: </para>
        <informaltable rules="all">
            <col width="20%"/>
            <col width="80%"/>
            <thead>
               <tr>
                  <td align="center">Revision Date</td>
                  <td align="center">Summary of Changes</td>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td valign="top">
                     <para>March 14, 2014</para>
                  </td>
                  <td>
                     <para>Reorganized doc and added neutron api calls</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>February 17, 2014</para>
                  </td>
                  <td>
                     <para>Removed nova install from git instructions.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>February 13, 2014</para>
                  </td>
                  <td>
                     <para>Removed supernova install instructions and added supernova link to resources section.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>December 4, 2013</para>
                  </td>
                  <td>
                     <para>Updated the name for Managed Cloud Service Level</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>November 4, 2013</para>
                  </td>
                  <td>
                     <para>Published Performance server information, previously limited access. </para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>October 31, 2013</para>
                  </td>
                  <td>
                     <para>Fixed the link for requesting Cloud Networks access to
                        <link xlink:href="http://www.iwantcloudnetworks.com/">http://www.iwantcloudnetworks.com/</link>.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>September 26, 2013</para>
                  </td>
                  <td>
                     <itemizedlist spacing="compact">
                        <listitem>
                            <para>updated examples for d2to1 in install and update nova client section.</para>
                        </listitem>
                        <listitem>
                            <para>removed v4-fixed-ip from <xref linkend="nova_provision_server"/>
                           </para>
                        </listitem>
                    </itemizedlist>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>August 28, 2013</para>
                  </td>
                  <td>
                     <para>Removed references to bandwidth since the RAX extension is no longer implemented. It causes an
                        unsustainable load on Nova. See <xref linkend="list_servers"/>.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>June 26, 2013</para>
                  </td>
                  <td>
                     <para>Added Server Key Pairs nova commands.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>June 24, 2013</para>
                  </td>
                  <td>
                     <para>Added important note that user may choose any endpoint regardless of account origin.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>June 20, 2013</para>
                  </td>
                  <td>
                     <para>Updated link to supernova git repository</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>June 18, 2013</para>
                  </td>
                  <td>
                     <para>Removed optional parameters from nova_summary. </para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>June 17, 2013</para>
                  </td>
                  <td>
                     <para>Removed optional parameters, such as hint, block_device_mapping, availability_zone, and
                        security_groups, from <xref linkend="create_server_with_network"/>. </para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>May 23, 2013</para>
                  </td>
                  <td>
                     <para>Updated "control panel" to "Control Panel."</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>May 13, 2013</para>
                  </td>
                  <td>
                     <para>Added the Cloud Networks virtual interface extension, which enables you to create virtual interfaces for, list virtual interfaces
                        for, and delete virtual interfaces from existing server instances.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>March 26, 2013</para>
                  </td>
                  <td>
                     <para>Updated to add the list servers call, which lists servers and their attached networks.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>February 7, 2013</para>
                  </td>
                  <td>
                     <para>Corrected the JSON request to add missing slashes in <xref linkend="curl_create_network"/>.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>January 8, 2013</para>
                  </td>
                  <td>
                     <para>Updated the authentication section with additional information about the token
                        environment variable used in the cURL examples.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>December 14, 2012</para>
                  </td>
                  <td>
                     <para>Added a link for the json.tool:
                        <link xlink:href="http://docs.python.org/2/library/json.html">json — JSON encoder and decoder</link>.
                    </para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>December 4, 2012</para>
                  </td>
                  <td>
                     <para>Corrected the <literal>NOVA_RACK_AUTH</literal> environment variable to
                            <literal>NOVA_RAX_AUTH</literal>.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>November 14, 2012</para>
                  </td>
                  <td>
                     <para>Updated formatting in PDF.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>November 7, 2012</para>
                  </td>
                  <td>
                     <para>Updated formatting of nova client and cURL examples.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>November 1, 2012</para>
                  </td>
                  <td>
                     <para>Fixed formatting problems in code examples.</para>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>October 31, 2012</para>
                  </td>
                  <td>
                     <itemizedlist>
                        <listitem>
                            <para>Fixed the link for requesting Cloud Networks access to
                                <link xlink:href="http://www.iwantcloudnetworks.com/">http://www.iwantcloudnetworks.com/</link>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Corrected an error in list_networks.</para>
                        </listitem>
                    </itemizedlist>
                  </td>
               </tr>
               <tr>
                  <td valign="top">
                     <para>October 30, 2012</para>
                  </td>
                  <td>
                     <itemizedlist>
                        <listitem>
                            <para>Cloud Networks phased-release launch.</para>
                        </listitem>
                        <listitem>
                            <para>First edition of this guide.</para>
                        </listitem>
                    </itemizedlist>
                  </td>
               </tr>
            </tbody>
         </informaltable>
      </section>

      <section xml:id="Additional_Resources">
        <title>Resources</title>
        <para>
            <informaltable rules="all">
                <col width="33%"/>
                <col width="33%"/>
                <col width="33%"/>
                <thead>
                    <tr>
                        <th>Next generation Cloud Servers v2</th>
                        <th>Cloud Networks v2</th>
                        <th>Identity v2</th>
                    </tr>
                </thead>
                <tbody valign="top">
                    <tr>
                        <td>
                            <para>
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-releasenotes/content/index.html">
                                            <citetitle>Next Generation Cloud Servers Release Notes</citetitle>
                                    </link>
                                 </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/index.html">
                                            <citetitle>Next Generation Cloud Servers Getting Started</citetitle>
                                    </link>
                                 </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/index.html">
                                            <citetitle>Next Generation Cloud Servers Developer Guide</citetitle>
                                    </link>
                                 </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </td>
                        <td>
                            <para>
                                <itemizedlist role="compact">
                                    <listitem>
                                        <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cn-releasenotes/content/index.html">
                                            <citetitle>Cloud Networks Release Notes</citetitle>
                                    </link>
                                 </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cn-gettingstarted/content/index.html">
                                            <citetitle>Cloud Networks Getting Started</citetitle>
                                    </link>
                                 </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cn-devguide/content/index.html">
                                            <citetitle>Cloud Networks Developer Guide</citetitle>
                                    </link>
                                 </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </td>
                        <td>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                 <link xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/index.html">
                                        <citetitle>Cloud Identity Client Developer Guide v2.0</citetitle>
                                 </link>
                              </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                </tbody>
            </informaltable>
        </para>
        <para>For additional Cloud Servers and Cloud Networks service resources, see the
            <link xlink:href="http://www.rackspacecloud.com/cloud_hosting_products/servers">Rackspace Cloud</link> site,
            which provides related documents and links to Rackspace support channels including
            <link xlink:href="http://www.rackspace.com/knowledge_center/">Knowledge Center articles</link>, phone, chat, and
            tickets.</para>
        <para>For product updates and announcements through Twitter, see
            <link xlink:href="http://twitter.com/rackspace">http://twitter.com/rackspace</link>.</para>
        <para>For information about the supernova client, which is an unsupported wrapper for the nova client useful for
            managing multiple nova environments, see
            <link xlink:href="http://major.github.io/supernova/">supernova client</link>.</para>
      </section>
   </chapter>
    <chapter version="5.0"
            xml:id="ch_overview"
            xml:base="chapters/net_overview.xml">
        <title>Overview</title>
        <para>Cloud Networks enables you to create a virtual Layer 2 network, known as an isolated network, which gives you
                greater control and security when you deploy web applications. </para>
        <para>When you create a next generation Cloud Server, Cloud Networks enables you to attach one or more networks to
                your server. You can attach an isolated network that you have created or a Rackspace network. </para>
        <para>If you install the Cloud Networks virtual interface extension, you can create a virtual interface to a specified Rackspace or isolated network
                and attach that network to an existing server instance. You can also list virtual interfaces for and delete
                virtual interfaces from a server instance. For information about the Cloud Networks virtual interface extension, see <olink targetdoc="cn-devguide" targetptr="section_virt_ext">“Cloud Networks Virtual Interface
                        Extension”</olink>.</para>
        <para>Cloud Networks enables you to attach one or more of the following networks to your server: <itemizedlist>
                        <listitem>
                                <para>
                  <emphasis role="bold">
                     <glossterm>PublicNet</glossterm>
                  </emphasis>. Provides access to
                                        the Internet, to Rackspace services (such as Cloud Monitoring, Managed Cloud Service
                                        Level support, RackConnect, and Cloud Backup), and to certain operating system
                                        updates. </para>
                                <para>When you list networks through Cloud Networks, PublicNet is labeled
                                                <literal>public</literal>. </para>
                        </listitem>
                        <listitem>
                                <para>
                  <emphasis role="bold">
                     <glossterm>ServiceNet</glossterm>
                  </emphasis>. Provides access to
                                        Rackspace services such as Cloud Files, Cloud Databases, and Cloud Backup, and to
                                        certain packages and patches through an internal-only, multi-tenant network
                                        connection within each Rackspace data center. </para>
                                <para>When you list networks through Cloud Networks, ServiceNet is labeled
                                                <literal>private</literal>.</para>
                                <para>You can use ServiceNet for communications among web servers, application servers, and
                                        database servers without incurring bandwidth charges. However, without an isolated
                                        network, you must apply security rules to protect data integrity. When you add or
                                        remove a server, you must update the security rules on individual servers to permit
                                        or deny connections from newly added servers or removed servers. </para>
                        </listitem>
                        <listitem>
                                <para>
                  <emphasis role="bold">Isolated</emphasis>. Enables you to deploy web applications on a
                                        virtual Layer 2 network that you create through Cloud Networks. An isolated network
                                        keeps your server separate from PublicNet, ServiceNet, or both. When you create a
                                        isolated network, it is associated with your tenant ID.</para>
                        </listitem>
                </itemizedlist>
      </para>
        <para>When you provision a new server, the networks that are attached to it depend on which of the following methods
                you use to provision it: <itemizedlist>
                        <listitem>
                                <para>
                  <emphasis role="bold">The Cloud Servers API</emphasis>. You must specify the networks
                                        that you want to attach to your server. If you do not specify any networks,
                                        ServiceNet and PublicNet are attached by default. However, if you specify an isolated
                                        network, you must explicitly specify the UUIDs for PublicNet and ServiceNet to attach
                                        these networks to your server. The UUID for ServiceNet is
                                                <literal>11111111-1111-1111-1111-111111111111</literal>, and the UUID for
                                        PublicNet is <literal>00000000-0000-0000-0000-000000000000</literal>. </para>
                        </listitem>
                        <listitem>
                                <para>
                  <emphasis role="bold">The nova <command>boot</command> command</emphasis>. You must
                                        specify the networks that you want to attach to your server. If you do not specify
                                        any networks, ServiceNet and PublicNet are attached by default. To attach to isolated
                                        networks that you have created, you must explicitly specify them in the command. If
                                        you do so, those networks, in addition to PublicNet and ServiceNet, are attached to
                                        your server.</para>
                        </listitem>
                        <listitem>
                                <para>
                  <emphasis role="bold">The Cloud Control Panel</emphasis>. PublicNet and ServiceNet are
                                        automatically attached, but you can disable these networks during the server creation
                                        process. You can also attach any isolated networks that you have created. </para>
                        </listitem>
                </itemizedlist>
      </para>
        <note>
                <para>You can explicitly opt out of attaching to the Rackspace networks, which introduces certain potential
                        complications. For more information, see <olink targetdoc="cn-devguide" targetptr="networks">“Limitations of Detaching from Rackspace Networks”</olink>.</para>
        </note>
        <para>You can use Cloud Networks to perform the following tasks: <itemizedlist>
                        <listitem>
                                <para>List networks to which the specified tenant has access.</para>
                        </listitem>
                        <listitem>
                                <para>Create isolated networks.</para>
                        </listitem>
                        <listitem>
                                <para>Show details for isolated networks. </para>
                        </listitem>
                        <listitem>
                                <para>Delete an isolated network, but only if it is not associated with any server. </para>
                                <para>To detach a network from a server, you must use the Cloud Networks virtual interface extension to delete the virtual
                                        interface for the network from the server. See <olink targetdoc="cn-devguide" targetptr="section_virt_ext">“Cloud Networks Virtual Interface
                                                Extension”</olink>.</para>
                        </listitem>
                        <listitem>
                                <para>Manage subnets.</para>
                        </listitem>
                        <listitem>
                                <para>Manage ports.</para>
                        </listitem>
                        <listitem>
                                <para>Manage Layer-3 routers.</para>
                        </listitem>
                </itemizedlist>
      </para>
        <para>To list the networks that are attached to servers, issue a Cloud Servers List Servers operation. For more
                information, see
                <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/List_Servers-d1e2078.html">List Servers</link>
                in the <citetitle>Cloud Servers Developer Guide</citetitle>.</para>
        <section version="5.0"
               xml:id="section_nova_v_neutron"
               xml:base="chapters/net_nova_v_neutron.xml">
         <title>Networking: Nova-network versus Neutron</title>
         <para>Rackspace first introduced networking services by using the Nova-network API based on OpenStack. Now we are
        providing the Neutron API, also based on OpenStack, which offers more functionality and flexibility than the
        Nova-network API. Both sets of APIs continue to work well, but the Neutron API will be the base for all the future
        networking services that Rackspace offers. </para>
         <para>The Neutron API provides three primary, top-level resources (networks, ports, and subnets) and includes the ability
        to perform the following functions: <itemizedlist>
               <listitem>
                  <para>Use all existing create, read, update, delete (CRUD) API operations for networks</para>
               </listitem>
               <listitem>
                  <para>Attach and detach networks</para>
               </listitem>
               <listitem>
                  <para>Self-service additional IP addresses</para>
               </listitem>
               <listitem>
                  <para>Pass custom routes to servers</para>
               </listitem>
               <listitem>
                  <para>Set the default gateway on cloud networks</para>
               </listitem>
               <listitem>
                  <para>View quotas related to networks</para>
               </listitem>
            </itemizedlist>
         </para>
         <note>
            <para>The Neutron API operations return only JSON-formatted responses. There is no option to receive responses in
            XML.</para>
         </note>
      </section> 
        <section version="5.0"
               xml:id="networks"
               xml:base="chapters/net_limitations.xml">
         <title>Limitations of Detaching from Rackspace Networks</title>
         <para>When you provision a next generation Cloud Server, you can attach to one or more isolated networks and the
        Rackspace networks. You can also explicitly opt out of attaching the Rackspace networks to it, which introduces the
        following limitations: </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>If you do not attach the PublicNet network to your server, the server cannot access to the Internet and
                    some Rackspace products and services. </para>
               </listitem>
               <listitem>
                  <para>If you do not attach the ServiceNet network to your server, the server cannot access certain Rackspace
                    products and services. </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>The following graphic depicts the services that are available only when you attach the Rackspace networks to your
        server: <mediaobject>
               <imageobject>
                  <imagedata contentwidth="3in"
                             fileref="figures/1/a/a/figures/cloud-networks-infographic-revised4.png"/>
               </imageobject>
            </mediaobject>
         </para>
         <para>To opt out of attaching the Rackspace networks to your server, perform the following action depending on how you
        are provisioning the server: <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="bold">nova boot command</emphasis>. Specify the optional
                        <option>--no-public</option> and <option>--no-service-net</option> parameters. </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">Cloud Servers API</emphasis>. If you do not specify any networks, ServiceNet and
                    PublicNet are attached by default. However, if you specify an isolated network, you must explicitly
                    specify the UUIDs for PublicNet and ServiceNet to attach these networks to your server. </para>
                  <para>The UUID for ServiceNet is <literal>11111111-1111-1111-1111-111111111111</literal>, and the UUID for
                    PublicNet is <literal>00000000-0000-0000-0000-000000000000</literal>. </para>
                  <para>Omit these UUIDs from the request to detach from these networks.</para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="bold">Cloud Control Panel</emphasis>. Clear either or both of the PublicNet and
                    ServiceNet selections during the server creation process. You are warned that your capabilities might be
                    degraded by this choice.</para>
               </listitem>
            </itemizedlist>
         </para>
      </section>
   </chapter>
    <chapter version="5.0"
            xml:id="how_examples_work"
            xml:base="chapters/net_use_examples.xml">
      <title>Learn How to Use the Examples in This Guide</title>
      <para>For each exercise in this guide, you choose one of the following methods to make Cloud Networks API calls: <itemizedlist>
            <listitem>
                <para>
                  <emphasis role="bold">The
                        <link xlink:href="http://www.rackspace.com/knowledge_center/article/using-python-novaclient-with-the-rackspace-cloud">nova client</link>
                  </emphasis>.
                    We recommend that you use the nova client to run simple commands that make API calls. This open-source
                    Python client runs on Linux or Mac OS X systems and is easy to learn and use. You can specify a debug
                    parameter on any nova command to show the underlying API request for the command. This is a good way to
                    become familiar with API requests. </para>
                <para>See <xref linkend="novaclient"/>.</para>
            </listitem>
            <listitem>
                <para>
                  <emphasis role="bold">
                     <link xlink:href="http://curl.haxx.se/">cURL</link> commands</emphasis>. If you
                    are familiar with or want to learn cURL commands, choose this method. With cURL, you send HTTP requests
                    with embedded API calls from the command line. The cURL examples in this guide show request and response
                    bodies that are in JSON and XML formats. See <xref linkend="curl"/>
               </para>
            </listitem>
        </itemizedlist>If you like, you can use cURL in one example and switch to the nova client in the next example. If you
        choose to use a cURL command for any example, you must export the environment variables required to run the cURL
        examples. See <xref linkend="export_env_vars"/>. </para>
      <para>Each example, whether nova client or cURL, points you to the next step in the process. </para>

      <section version="5.0"
               xml:id="novaclient"
               xml:base="chapters/net_how_nova_works.xml">
         <title>How the nova Client Works</title>
         <para>The nova client is an open-source Python client that lets you run commands to make API calls. This client
        is easy to learn and use. Each nova client command runs cURL commands that embed API requests. You can run the
        nova client from a desktop machine or remote system, such as a Cloud Server. </para>
         <para>You install the nova client on a Linux distribution or on Mac OS X. To install the nova client, see <xref linkend="install_nova"/>. </para>
         <para>To configure the nova client, you update your bash profile to set and export nova environment variables. </para>
         <note>
            <para>You can specify a debug parameter on any nova command to show the underlying API request for the command. This
            is a good way to become familiar with the API requests. </para>
         </note>
         <warning>
            <para>If you upgrade the operating system of the desktop or remote machine where you installed nova, you may need to
            reinstall nova.</para>
         </warning>
      </section>
      <section version="5.0"
               xml:id="curl"
               xml:base="chapters/net_how_curl_works.xml">
         <title>How cURL Commands Work</title>
         <para>cURL is a command-line tool that you can use to interact with <glossterm>REST</glossterm> interfaces. cURL lets you
        to transmit and receive <glossterm>HTTP</glossterm> requests and responses from the command line or a shell script,
        which enables you to work with the API directly. It is available for Linux distributions, Mac OS X, and Windows. For
        information about cURL, see <link xlink:href="http://curl.haxx.se/">http://curl.haxx.se/</link>. </para>
         <para>To use XML requests and responses, see <xref linkend="curl_summary_xml"/>.</para>

         <para>To run the cURL request examples shown in this guide, copy each example from the HTML version of this guide
        directly to the command line or a script.</para>

         <para>The following command is an example cURL command that provisions a server with an isolated network:</para>

         <example xml:id="json_example">
            <title>cURL Command Example: JSON Request</title>
            <programlisting language="bash" role="gutter: false"><?db-font-size 60%?>
            $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers \
       -X POST \
       -H "X-Auth-Project-Id: $account" \
       -H "Content-Type: application/json" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $token" \
       -d '{"server": {"name": "my_server_with_network", "imageRef": "d42f821e-c2d1-4796-9f07-af5ed7912d0e", "flavorRef": "2", "max_count": 1, "min_count": 1, "networks": [{"uuid": "538a112a-34d1-47ff-bf1e-c40639e886e2"}, {"uuid": "00000000-0000-0000-0000-000000000000"}, {"uuid": "11111111-1111-1111-1111-111111111111"}]}}' \
      | python -m json.tool</programlisting>
         </example>
         <note>
            <para>The carriage returns in the cURL request examples use a backslash (<literal>\</literal>) as an escape
            character. The escape character allows continuation of the command across multiple lines. However, do not include
            the escape character in the JSON or XML request body within the cURL command.</para>
         </note>
         <?hard-pagebreak?>
         <para>The cURL examples in this guide use the following command-line options:</para>
         <table xml:id="curl_options" rules="all" width="85%">
            <caption>cURL Command-Line Options</caption>

            <thead>
               <tr>
                  <th>Option</th>
                  <th>Description</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td>
                    <option>-d</option>
                  </td>
                  <td>
                    <para>Sends the specified data in a <command>POST</command> request to the HTTP server. Use this option to send a JSON or
                        XML request body to the server.</para>
                  </td>
               </tr>
               <tr>
                  <td>
                    <option>-H</option>
                  </td>
                  <td>
                    <para>Specifies an extra HTTP header in the request. You can specify any number of extra headers. Precede
                        each header with the <option>-H</option> option. </para>
                    <para>Common headers in Rackspace API requests are as follows:<itemizedlist>
                            <listitem>
                                <para>
                                 <literal>Content-Type</literal>. Required for operations with a request body. </para>
                                <para>Specifies the format of the request body. Following is the syntax for the header where
                                        <parameter>format</parameter> is either <literal>json</literal> or
                                        <literal>xml</literal>.</para>
                                <screen>Content-Type: application/format</screen>
                            </listitem>
                            <listitem>
                                <para>
                                 <literal>X-Auth-Token</literal>. Required. Specifies the authentication token.</para>
                            </listitem>
                            <listitem>
                                <para>
                                 <literal>X-Auth-Project-Id</literal>. Optional. Specifies the project ID, which can be
                                    your account number or another value.</para>
                            </listitem>
                            <listitem>
                                <para>
                                 <literal>Accept</literal>. Optional. </para>
                                <para>Specifies the format of the response body. Following is the syntax for the header where
                                        <parameter>format</parameter> is either <literal>json</literal> or
                                        <literal>xml</literal>. The default is <literal>json</literal>.</para>
                                <screen>Accept: application/format</screen>
                            </listitem>
                        </itemizedlist>
                     </para>
                  </td>
               </tr>
               <tr>
                  <td>
                    <option>-i</option>
                  </td>
                  <td>
                    <para>Includes the HTTP header in the output. </para>
                  </td>
               </tr>
               <tr>
                  <td>
                    <option>-s</option>
                  </td>
                  <td>
                    <para>Specifies silent or quiet mode, which makes cURL mute. No progress or error messages are
                        shown.</para>
                  </td>
               </tr>
               <tr>
                  <td>
                    <option>-T</option>
                  </td>
                  <td>
                    <para>Transfers the specified local file to the remote URL.</para>
                  </td>
               </tr>
               <tr>
                  <td>
                    <option>-X</option>
                  </td>
                  <td>
                    <para>Specifies the request method to use when communicating with the HTTP server. The specified request
                        is used instead of the default method, which is <command>GET</command>. </para>
                  </td>
               </tr>
            </tbody>
         </table>
         <note xml:id="json_tool">
            <para>For commands that return a response, you can append the following code to the command to call json.tool to
            pretty-print output: </para>
            <programlisting language="bash" role="gutter: false">| python -m json.tool</programlisting>
            <para>To use json.tool, import the json module. For information about json.tool, see
            <link xlink:href="http://docs.python.org/2/library/json.html">json — JSON encoder and decoder</link>. </para>
            <para>If you run a Python version older than 2.6, import the simplejson module and use simplejson.tool. For
            information about simplejson.tool, see
            <link xlink:href="http://simplejson.googlecode.com/svn/tags/simplejson-2.0.9/docs/index.html">simplejson — JSON encoder and decoder</link>.</para>
            <para>If you do not want to pretty-print JSON output, omit this code. </para>
         </note>
         <?hard-pagebreak?>
         <section version="5.0"
                  xml:id="curl_summary_xml"
                  xml:base="net_how_curl_works_xml.xml">

            <title>XML Requests and Responses</title>
            <para>The following example shows a cURL command that specifies an XML request body and returns an XML response. The
        command creates a server.</para>
            <example xml:id="xml_example">
               <title>cURL Command Example: XML Request</title>
               <programlistingco>
                  <areaspec>
                     <area xml:id="xml_curl.txt.endpoint" units="linecolumn" coords="1 87"/>
                     <area xml:id="xml_curl.txt.content" units="linecolumn" coords="4 46"/>
                     <area xml:id="xml_curl.txt.accept" units="linecolumn" coords="5 40"/>
                     <area xml:id="xml_curl.txt.file" units="linecolumn" coords="7 29"/>
                     <area xml:id="xml_curl.txt.ppxml" units="linecolumn" coords="7 38"/>
                  </areaspec>
                  <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>$ curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers.xml \
     -X POST \
     -H "X-Auth-Project-Id: $account" \
     -H "Content-Type: application/xml" \
     -H "Accept: application/xml" \
     -H "X-Auth-Token: $token" \
     -T server_post_req.xml | ppxml          </programlisting>
               </programlistingco>
            </example>
            <para>This example includes the following changes to the basic JSON request format in <olink targetdoc="cn-devguide" targetptr="json_example">Example 5, “cURL Command Example: JSON Request”</olink>:<calloutlist>
                  <callout arearefs="xml_curl.txt.endpoint">
                     <para>The endpoint in the cURL command has <literal>.xml</literal> appended to it to return an XML
                    response.</para>
                  </callout>
                  <callout arearefs="xml_curl.txt.content">
                     <para>The <literal>Content-Type:</literal> header specifies <literal>application/xml</literal> instead of
                        <literal>application/json</literal>. </para>
                  </callout>
                  <callout arearefs="xml_curl.txt.accept">
                     <para>The <literal>Accept:</literal> header specifies <literal>application/xml</literal> instead of
                        <literal>application/json</literal>. </para>
                  </callout>
                  <callout arearefs="xml_curl.txt.file">
                     <para>The request body, if required, should be specified it in XML format. In this example, the XML body is
                    passed in the <filename>server_post_req.xml</filename> file, as follows:</para>
                     <programlisting language="xml"><?db-font-size 55%?>
                    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;server xmlns="http://docs.openstack.org/compute/api/v1.1" imageRef="3afe97b2-26dc-49c5-a2cc-a2fc8d80c001" flavorRef="2"
  name="api-test-server-xml2"&gt;
  &lt;metadata&gt;
    &lt;meta key="My Server Name"&gt;API Test Server XML&lt;/meta&gt;
  &lt;/metadata&gt;
  &lt;personality&gt;
    &lt;file path="/etc/banner.txt"&gt; ICAgICAgDQoiQSBjbG91ZCBkb2VzIG5vdCBrbm93IHdoeSBp
      dCBtb3ZlcyBpbiBqdXN0IHN1Y2ggYSBkaXJlY3Rpb24gYW5k IGF0IHN1Y2ggYSBzcGVlZC4uLkl0IGZlZWxzIGFuIGltcHVs
      c2lvbi4uLnRoaXMgaXMgdGhlIHBsYWNlIHRvIGdvIG5vdy4g QnV0IHRoZSBza3kga25vd3MgdGhlIHJlYXNvbnMgYW5kIHRo
      ZSBwYXR0ZXJucyBiZWhpbmQgYWxsIGNsb3VkcywgYW5kIHlv dSB3aWxsIGtub3csIHRvbywgd2hlbiB5b3UgbGlmdCB5b3Vy
      c2VsZiBoaWdoIGVub3VnaCB0byBzZWUgYmV5b25kIGhvcml6 b25zLiINCg0KLVJpY2hhcmQgQmFjaA==&lt;/file&gt;
  &lt;/personality&gt;
  &lt;networks&gt;
    &lt;network uuid="0ef47ac7-6797-4e01-8a47-ed26ec3aaa56"/&gt;
    &lt;network uuid="00000000-0000-0000-0000-000000000000"/&gt;
    &lt;network uuid="11111111-1111-1111-1111-111111111111"/&gt;
  &lt;/networks&gt;
  &lt;keypair&gt;
    &lt;key_name&gt;name_of_keypair-96bbe50e-05e1-4d59-9115-4779a3ebcc2e&lt;/key_name&gt;
  &lt;/keypair&gt;
&lt;/server&gt;
</programlisting>
                  </callout>
                  <callout arearefs="xml_curl.txt.ppxml">
                     <para>To pretty-print the XML output, set the <literal>ppxml</literal> alias, as follows: </para>
                     <programlisting language="bash" role="gutter: false"><?db-font-size 50%?>
                    $ alias ppxml='python -c "import sys, xml.dom.minidom; print xml.dom.minidom.parseString(sys.stdin.read()).toprettyxml()"'</programlisting>
                     <para>Then, append the <literal>ppxml</literal> alias to the cURL command. </para>
                  </callout>
               </calloutlist>
            </para>

            <para>The cURL command returns information about the new server in XML format, as shown in the following example.</para>
            <example xml:id="xml_example_reponse">
               <title>cURL Command Example: XML Response</title>
               <programlisting language="xml"><?db-font-size 65%?>
            &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;server
    xmlns:OS-DCF="http://docs.openstack.org/compute/ext/disk_config/api/v1.1"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns="http://docs.openstack.org/compute/api/v1.1"
    id="ed5c7754-29b6-45fa-96cb-ab64958c8c0a" adminPass="Dd5pNZtpVVQ3"
    OS-DCF:diskConfig="AUTO"&gt;
    &lt;metadata/&gt;
    &lt;atom:link
        href="https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/ed5c7754-29b6-45fa-96cb-ab64958c8c0a"
        rel="self"/&gt;
    &lt;atom:link
        href="https://dfw.servers.api.rackspacecloud.com/010101/servers/ed5c7754-29b6-45fa-96cb-ab64958c8c0a"
        rel="bookmark"/&gt;
&lt;/server&gt;
</programlisting>
            </example>

         </section>
      </section>
   </chapter>
    <chapter xmlns:raxm="http://docs.rackspace.com/api/metadata"
            version="5.0"
            xml:id="ch_gs_getting_set_up"
            xml:base="chapters/net_set_up.xml">
      <info>
        <title>Set Up the Environment and Authenticate</title>
        
      </info>
      <para>Steps 1 and 2 walk you through the steps to set up your working environment. You can choose to use
        the nova client or cURL. Select the appropriate method to prepare for the exercises to create isolated networks and
        servers. Step 3 walks you through getting authenticated.</para>

      <section version="5.0"
               xml:id="install_nova"
               xml:base="chapters/net_install_nova.xml">

         <title>Step 1. (Optional) Install the nova Client with the Cloud Networks Extension</title>
         <para>To manage your servers from the command line, you can use the open-source nova client application called
            <literal>python-novaclient</literal>. </para>
         <para>To install the nova client, you first install the <literal>rackspace-novaclient</literal> package, which includes
        the nova client and the Rackspace extensions including the Cloud Networks extension.</para>
         <para>If you want to use the Cloud Networks virtual interface extension, you must also install the
            <literal>os_virtual_interfacesv2_python_novaclient_ext</literal> package. </para>
         <note>
            <para>The python-novaclient is developed and maintained by the OpenStack community. While we do not directly support
            python-novaclient, you can post in the comments below if you run into any difficulties.</para>
         </note>
         <para>Before you begin, install the following software:<table rules="all" width="90%">
               <caption>Nova Client Prerequisite Software</caption>
               <col width="25%"/>
               <col width="75%"/>
               <thead>
                  <tr>
                    <th>Prerequisite</th>
                    <th>Description</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                    <td valign="top">
                        <para>Python 2.6 or later</para>
                    </td>
                    <td>
                        <para>Currently, the nova client does not support Python 3. </para>
                    </td>
                  </tr>
                  <tr>
                    <td valign="top">
                        <para>
                           <command>setuptools</command> package </para>
                    </td>
                    <td>
                        <para>Installed by default on Mac OS X. </para>
                        <para>Many Linux distributions provide packages to make <command>setuptools</command> easy to
                            install.</para>
                        <para>Search your package manager for <command>setuptools</command> to find an installation package.
                            If you cannot find one, download the <command>setuptools</command> package directly from
                            <link xlink:href="http://pypi.python.org/pypi/setuptools">http://pypi.python.org/pypi/setuptools</link>.
                        </para>
                    </td>
                  </tr>
                  <tr>
                    <td valign="top">
                        <command>pip</command> package</td>
                    <td>
                        <para>To install the nova client on a Mac OS X or Linux system, use <command>pip</command> because it
                            is easy and ensures that you get the latest version of the nova client from the
                            <link xlink:href="http://pypi.python.org/pypi/python-novaclient/">Python Package Index</link>.
                            Also, it lets you update the package later on.</para>
                        <para>Install <command>pip</command> through the package manager for your system:<itemizedlist>
                                <listitem>
                                    <para>Mac OS X
                                        <programlisting language="bash" role="gutter: false">
                                            $ sudo easy_install pip</programlisting>
                                 </para>
                                </listitem>
                                <listitem>
                                    <para>Ubuntu
                                        <programlisting language="bash" role="gutter: false">
                                            $ aptitude install python-pip </programlisting>
                                 </para>
                                </listitem>
                                <listitem>
                                    <para>Debian
                                        <programlisting language="bash" role="gutter: false">
                                            $ aptitude install python-pip </programlisting>
                                 </para>
                                </listitem>
                                <listitem>
                                    <para>Fedora
                                        <programlisting language="bash" role="gutter: false">
                                            $ yum install python-pip</programlisting>
                                 </para>
                                </listitem>
                                <listitem>
                                    <para>CentOS, or RHEL (from EPEL or another 3rd party repository)
                                        <programlisting language="bash" role="gutter: false">
                                            $ yum install python-pip</programlisting>
                                 </para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </td>
                  </tr>
               </tbody>
            </table>
         </para>

         <procedure>
            <title>To install the nova client with Rackspace extensions:</title>

            <step>
               <title>Install or update the nova client package with Rackspace extensions</title>
               <para>The <literal>rackspace-novaclient</literal> package includes the nova client and Rackspace extensions,
                including the Cloud Networks extension. </para>
               <para>Run the following command for your operating system to install the <literal>rackspace-novaclient</literal>
                package:</para>
               <para>For Ubuntu, Debian, or OS X: </para>
               <programlisting language="bash" role="gutter: false">
                $ sudo pip install rackspace-novaclient</programlisting>
               <para>For RHEL, CentOS, or Fedora: </para>
               <programlisting language="bash" role="gutter: false">
                $ sudo python-pip install rackspace-novaclient</programlisting>
               <note>

                  <para>If you previously installed the <literal>rackspace-novaclient</literal> package, run the following
                    command for your operating system to upgrade it:</para>
                  <para> For Ubuntu, Debian, or OS X:
                    <programlisting language="bash" role="gutter: false">
                        $ sudo pip install --upgrade rackspace-novaclient</programlisting>
                    For RHEL, CentOS, or Fedora:
                    <programlisting language="bash" role="gutter: false">
                        $ sudo python-pip install --upgrade rackspace-novaclient</programlisting>
                  </para>
               </note>
               <important>
                  <itemizedlist>
                    <listitem>
                        <para>If you previously installed the earlier <literal>rax_networks_python_novaclient_ext</literal>
                            package, run the following command for your operating system to remove it: </para>
                        <para> For Ubuntu, Debian, or OS X:
                            <programlisting language="bash" role="gutter: false">
                                $ sudo pip uninstall rax_networks_python_novaclient_ext</programlisting>
                            For RHEL, CentOS, or Fedora:
                            <programlisting language="bash" role="gutter: false">
                                $ sudo python-pip uninstall rax_networks_python_novaclient_ext</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>If you have trouble using pip to install the nova client, you can also download a nova client
                            installation package from the
                            <link xlink:href="http://pypi.python.org/pypi/rackspace-novaclient/">python package repository</link>.
                            Or, you can use pip to individually install the <literal>python-novaclient</literal> and
                                <literal>rackspace-auth-openstack</literal> packages.</para>
                    </listitem>
                  </itemizedlist>
               </important>
            </step>

            <step>
               <title>Set environment variables</title>
               <para>Edit your bash profile to add and set environment variables that enable the nova client to connect to your
                Rackspace Cloud account. Use nano or an editor of your choice to edit your <filename>.bash_profile</filename>
                file:</para>
               <programlisting language="bash" role="gutter: false">$ nano ~/.bash_profile </programlisting>
               <para>Depending on your account location, add one of the following sets of lines to your bash profile and save
                the file:<example>
                    <title>US Data Center Example</title>
                    <screen><?db-font-size 65%?>export OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
export OS_AUTH_SYSTEM=rackspace
export OS_REGION_NAME=DFW
export OS_USERNAME=&lt;username&gt;
export OS_TENANT_NAME=&lt;tenant_id&gt;
export NOVA_RAX_AUTH=1
export OS_PASSWORD=&lt;api_key&gt;
export OS_PROJECT_ID=&lt;tenant_id&gt;
export OS_NO_CACHE=1</screen>
                  </example>
                  <example>
                    <title>UK Data Center Example</title>
                    <screen><?db-font-size 65%?>export OS_AUTH_URL=https://lon.identity.api.rackspacecloud.com/v2.0/
export OS_AUTH_SYSTEM=rackspace_uk
export OS_REGION_NAME=LON
export OS_USERNAME=&lt;username&gt;
export OS_TENANT_NAME=&lt;tenant_id&gt;
export NOVA_RAX_AUTH=1
export OS_PASSWORD=&lt;apikey&gt;
export OS_PROJECT_ID=&lt;tenant_id&gt;
export OS_NO_CACHE=1</screen>
                  </example>
               </para>
            </step>
            <step>
               <title>Set permissions on the bash profile</title>
               <para>Because the bash profile contains a password, set permissions on it so other people cannot read it:</para>
               <programlisting language="bash" role="gutter: false">$  chmod 600 ~/.bash_profile </programlisting>
            </step>
            <step>
               <title>Source the environment variables</title>
               <para>To source the variables to make them available in your current shell, run the following command:</para>
               <programlisting language="bash" role="gutter: false">$ source ~/.bash_profile </programlisting>
            </step>
            <step>
               <title>Test the nova client</title>
               <para>To verify that you can talk to the API server, authenticate and list
                images:<programlisting language="bash" role="gutter: false">$ nova credentials 
$ nova image-list </programlisting>
               </para>
               <para>Then, list networks:
                <programlisting language="bash" role="gutter: false">$ nova network-list </programlisting>
               </para>
            </step>
            <step>
               <title>Get help for nova client commands</title>
               <para>To get help for nova client commands, run the following command:</para>
               <programlisting language="bash" role="gutter: false">$ nova help </programlisting>
               <para>To get help for a specific command, type the command name after the <parameter>help</parameter> parameter,
                as follows:</para>
               <programlisting language="bash" role="gutter: false">$ nova help &lt;command_name&gt; </programlisting>
               <para>You cannot use every command that is listed. The nova client was written for use with recent development
                versions of OpenStack, so it includes support for some features that are not available in the Rackspace
                Cloud.</para>
               <note>
                  <para>To show and become familiar with the underlying API v2 request for a command, specify the
                        <literal>--debug</literal> parameter as the first parameter on any command. For example:
                    <programlisting language="bash" role="gutter: false">
                        $ nova --debug list</programlisting>
                  </para>
               </note>
            </step>
            <step>
               <title>Troubleshooting</title>
               <para>The python-novaclient is developed and maintained by the OpenStack community. </para>
               <itemizedlist>
                  <listitem>
                    <para>If you cannot run commands successfully, make sure that you entered your user name, password, and
                        account number correctly in the bash profile file. </para>
                  </listitem>
                  <listitem>
                    <para>If you change any environment variables, either log out and back in or source your bash profile
                        again. </para>
                  </listitem>
                  <listitem>
                    <para>To override some environment variable settings, you can use the options that are listed at the end
                        of the <command>nova help</command> output. For example, you can override the
                            <literal>OS_PASSWORD</literal> setting in the bash profile by specifying a password on a nova
                        command, as follows: </para>
                    <programlisting language="bash" role="gutter: false">
                        $ nova --password &lt;password&gt; image-list </programlisting>
                    <para>Where <parameter>password</parameter> is your Rackspace password.</para>
                  </listitem>
                  <listitem>
                    <para> While Rackspace does not directly support python-novaclient, if the above steps don't help, you
                        can post a question in the comments below.</para>
                  </listitem>
               </itemizedlist>
            </step>
         </procedure>
         <sidebar>
            <para>
               <emphasis role="bold">Next step:</emphasis>
               <xref linkend="install_neutron"/>
            </para>
         </sidebar>
      </section>
      <section version="5.0"
               xml:id="install_neutron"
               xml:base="chapters/net_install_neutron.xml">

         <title>Step 2. (Optional) Install the neutron Client with the Cloud Networks Extension</title>
         <para>Follow the necessary steps to install the neutron client (TBD).</para>
         <!--<para>To manage your servers from the command line, you can use the open-source nova client application called
            <literal>python-novaclient</literal>. </para>
    <para>To install the nova client, you first install the <literal>rackspace-novaclient</literal> package, which includes
        the nova client and the Rackspace extensions including the Cloud Networks extension.</para>
    <para>If you want to use the Cloud Networks virtual interface extension, you must also install the
            <literal>os_virtual_interfacesv2_python_novaclient_ext</literal> package. </para>
    <note>
        <para>The python-novaclient is developed and maintained by the OpenStack community. While we do not directly support
            python-novaclient, you can post in the comments below if you run into any difficulties.</para>
    </note>
    <para>Before you begin, install the following software:<table rules="all" width="90%">
            <caption>Nova Client Prerequisite Software</caption>
            <col width="25%"/>
            <col width="75%"/>
            <thead>
                <tr>
                    <th>Prerequisite</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td valign="top">
                        <para>Python 2.6 or later</para>
                    </td>
                    <td>
                        <para>Currently, the nova client does not support Python 3. </para>
                    </td>
                </tr>
                <tr>
                    <td valign="top">
                        <para><command>setuptools</command> package </para>
                    </td>
                    <td>
                        <para>Installed by default on Mac OS X. </para>
                        <para>Many Linux distributions provide packages to make <command>setuptools</command> easy to
                            install.</para>
                        <para>Search your package manager for <command>setuptools</command> to find an installation package.
                            If you cannot find one, download the <command>setuptools</command> package directly from
                            <link xlink:href="http://pypi.python.org/pypi/setuptools">http://pypi.python.org/pypi/setuptools</link>.
                        </para>
                    </td>
                </tr>
                <tr>
                    <td valign="top"><command>pip</command> package</td>
                    <td>
                        <para>To install the nova client on a Mac OS X or Linux system, use <command>pip</command> because it
                            is easy and ensures that you get the latest version of the nova client from the
                            <link xlink:href="http://pypi.python.org/pypi/python-novaclient/">Python Package Index</link>.
                            Also, it lets you update the package later on.</para>
                        <para>Install <command>pip</command> through the package manager for your system:<itemizedlist>
                                <listitem>
                                    <para>Mac OS X
                                        <programlisting language="bash" role="gutter: false">
                                            <prompt>$</prompt> sudo easy_install pip</programlisting></para>
                                </listitem>
                                <listitem>
                                    <para>Ubuntu
                                        <programlisting language="bash" role="gutter: false">
                                            <prompt>$</prompt> aptitude install python-pip </programlisting></para>
                                </listitem>
                                <listitem>
                                    <para>Debian
                                        <programlisting language="bash" role="gutter: false">
                                            <prompt>$</prompt> aptitude install python-pip </programlisting></para>
                                </listitem>
                                <listitem>
                                    <para>Fedora
                                        <programlisting language="bash" role="gutter: false">
                                            <prompt>$</prompt> yum install python-pip</programlisting></para>
                                </listitem>
                                <listitem>
                                    <para>CentOS, or RHEL (from EPEL or another 3rd party repository)
                                        <programlisting language="bash" role="gutter: false">
                                            <prompt>$</prompt> yum install python-pip</programlisting></para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </td>
                </tr>
            </tbody>
        </table></para>

    <procedure>
        <title>To install the nova client with Rackspace extensions:</title>

        <step>
            <title>Install or update the nova client package with Rackspace extensions</title>
            <para>The <literal>rackspace-novaclient</literal> package includes the nova client and Rackspace extensions,
                including the Cloud Networks extension. </para>
            <para>Run the following command for your operating system to install the <literal>rackspace-novaclient</literal>
                package:</para>
            <para>For Ubuntu, Debian, or OS X: </para>
            <programlisting language="bash" role="gutter: false">
                <prompt>$</prompt> sudo pip install rackspace-novaclient</programlisting>
            <para>For RHEL, CentOS, or Fedora: </para>
            <programlisting language="bash" role="gutter: false">
                <prompt>$</prompt> sudo python-pip install rackspace-novaclient</programlisting>
            <note>

                <para>If you previously installed the <literal>rackspace-novaclient</literal> package, run the following
                    command for your operating system to upgrade it:</para>
                <para> For Ubuntu, Debian, or OS X:
                    <programlisting language="bash" role="gutter: false">
                        <prompt>$</prompt> sudo pip install -\-upgrade rackspace-novaclient</programlisting>
                    For RHEL, CentOS, or Fedora:
                    <programlisting language="bash" role="gutter: false">
                        <prompt>$</prompt> sudo python-pip install -\-upgrade rackspace-novaclient</programlisting>
                </para>
            </note>
            <important>
                <itemizedlist>
                    <listitem>
                        <para>If you previously installed the earlier <literal>rax_networks_python_novaclient_ext</literal>
                            package, run the following command for your operating system to remove it: </para>
                        <para> For Ubuntu, Debian, or OS X:
                            <programlisting language="bash" role="gutter: false">
                                <prompt>$</prompt> sudo pip uninstall rax_networks_python_novaclient_ext</programlisting>
                            For RHEL, CentOS, or Fedora:
                            <programlisting language="bash" role="gutter: false">
                                <prompt>$</prompt> sudo python-pip uninstall rax_networks_python_novaclient_ext</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>If you have trouble using pip to install the nova client, you can also download a nova client
                            installation package from the
                            <link xlink:href="http://pypi.python.org/pypi/rackspace-novaclient/">python package repository</link>.
                            Or, you can use pip to individually install the <literal>python-novaclient</literal> and
                                <literal>rackspace-auth-openstack</literal> packages.</para>
                    </listitem>
                </itemizedlist>
            </important>
        </step>

        <step>
            <title>Set environment variables</title>
            <para>Edit your bash profile to add and set environment variables that enable the nova client to connect to your
                Rackspace Cloud account. Use nano or an editor of your choice to edit your <filename>.bash_profile</filename>
                file:</para>
            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nano ~/.bash_profile </programlisting>
            <para>Depending on your account location, add one of the following sets of lines to your bash profile and save
                the file:<example>
                    <title>US Data Center Example</title>
                    <screen><computeroutput><?db-font-size 65%?>export OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
export OS_AUTH_SYSTEM=rackspace
export OS_REGION_NAME=DFW
export OS_USERNAME=&lt;username>
export OS_TENANT_NAME=&lt;tenant_id>
export NOVA_RAX_AUTH=1
export OS_PASSWORD=&lt;api_key>
export OS_PROJECT_ID=&lt;tenant_id>
export OS_NO_CACHE=1</computeroutput></screen>
                </example><example>
                    <title>UK Data Center Example</title>
                    <screen><computeroutput><?db-font-size 65%?>export OS_AUTH_URL=https://lon.identity.api.rackspacecloud.com/v2.0/
export OS_AUTH_SYSTEM=rackspace_uk
export OS_REGION_NAME=LON
export OS_USERNAME=&lt;username>
export OS_TENANT_NAME=&lt;tenant_id>
export NOVA_RAX_AUTH=1
export OS_PASSWORD=&lt;apikey>
export OS_PROJECT_ID=&lt;tenant_id>
export OS_NO_CACHE=1</computeroutput></screen>
                </example></para>
        </step>
        <step>
            <title>Set permissions on the bash profile</title>
            <para>Because the bash profile contains a password, set permissions on it so other people cannot read it:</para>
            <programlisting language="bash" role="gutter: false"><prompt>$</prompt>  chmod 600 ~/.bash_profile </programlisting>
        </step>
        <step>
            <title>Source the environment variables</title>
            <para>To source the variables to make them available in your current shell, run the following command:</para>
            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> source ~/.bash_profile </programlisting>
        </step>
        <step>
            <title>Test the nova client</title>
            <para>To verify that you can talk to the API server, authenticate and list
                images:<programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova credentials 
<prompt>$</prompt> nova image-list </programlisting></para>
            <para>Then, list networks:
                <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova network-list </programlisting></para>
        </step>
        <step>
            <title>Get help for nova client commands</title>
            <para>To get help for nova client commands, run the following command:</para>
            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova help </programlisting>
            <para>To get help for a specific command, type the command name after the <parameter>help</parameter> parameter,
                as follows:</para>
            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova help &lt;command_name> </programlisting>
            <para>You cannot use every command that is listed. The nova client was written for use with recent development
                versions of OpenStack, so it includes support for some features that are not available in the Rackspace
                Cloud.</para>
            <note>
                <para>To show and become familiar with the underlying API v2 request for a command, specify the
                        <literal>-\-debug</literal> parameter as the first parameter on any command. For example:
                    <programlisting language="bash" role="gutter: false">
                        <prompt>$</prompt> nova -\-debug list</programlisting></para>
            </note>
        </step>
        <step>
            <title>Troubleshooting</title>
            <para>The python-novaclient is developed and maintained by the OpenStack community. </para>
            <itemizedlist>
                <listitem>
                    <para>If you cannot run commands successfully, make sure that you entered your user name, password, and
                        account number correctly in the bash profile file. </para>
                </listitem>
                <listitem>
                    <para>If you change any environment variables, either log out and back in or source your bash profile
                        again. </para>
                </listitem>
                <listitem>
                    <para>To override some environment variable settings, you can use the options that are listed at the end
                        of the <command>nova help</command> output. For example, you can override the
                            <literal>OS_PASSWORD</literal> setting in the bash profile by specifying a password on a nova
                        command, as follows: </para>
                    <programlisting language="bash" role="gutter: false">
                        <prompt>$</prompt> nova -\-password &lt;password> image-list </programlisting>
                    <para>Where <parameter>password</parameter> is your Rackspace password.</para>
                </listitem>
                <listitem>
                    <para> While Rackspace does not directly support python-novaclient, if the above steps don't help, you
                        can post a question in the comments below.</para>
                </listitem>
            </itemizedlist>
        </step>
    </procedure>-->
         <sidebar>
            <para>
               <emphasis role="bold">Next step:</emphasis>
               <xref linkend="export_env_vars"/>
            </para>
         </sidebar>
      </section>
      <section version="5.0"
               xml:id="export_env_vars"
               xml:base="chapters/net_curl_export_vars.xml">
         <title>Step 3. (Optional) Export Environment Variables to Run cURL Commands</title>
         <para>To run the cURL command examples in this guide, follow this procedure to export environment variables. </para>
         <para>Export your tenant ID and authentication token to environment variables. All cURL examples in this guide use these
        environment variables.</para>
         <procedure>
            <title>To export environment variables:</title>
            <step>
               <para>Export your tenant ID to the <literal>account</literal> environment variable:</para>
               <screen>$ export account="&lt;tenantId&gt;"</screen>
               <para>Where <parameter>tenantId</parameter> is the value in the <literal>tenantId</literal> field in the
                authentication response. </para>
            </step>
            <step>
               <para>Export your authentication token to the <literal>token</literal> environment variable:
                <screen>
                    $ export token="&lt;id&gt;"</screen>
                Where <parameter>id</parameter> is the authentication token value in the <literal>id</literal> field in the
                    <literal>token</literal> element in the authentication response. </para>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                    <xref linkend="net_auth"/>
                  </para>
               </sidebar>
            </step>
         </procedure>
      </section>
      <!--need to add neutron client install here? -->
      <section version="5.0" xml:id="net_auth" xml:base="chapters/net_auth.xml">
         <title>
            <phrase audience="gs">Step 4. Get Authentication
            Token</phrase>
         </title>
         <para>To authenticate access to Rackspace Cloud services, you issue an authentication request to the Rackspace Cloud Identity Service, which is an
        implementation of the OpenStack Keystone Identity Service v2.0.</para>
         <important>
            <para> Multiple Rackspace Cloud Identity Service endpoints exist. You may use any endpoint, regardless of where your account was created.
        </para>
         </important>
         <para> Use the chosen endpoint, as follows:</para>
         <para>
            <informaltable rules="all">
               <col width="25%"/>
               <col width="75%"/>
               <thead>
                  <tr>
                    <th>National location</th>
                    <th>Rackspace Cloud Identity Service endpoint</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                    <td>US </td>
                    <td>
                        <link xlink:href="https://identity.api.rackspacecloud.com/v2.0">https://identity.api.rackspacecloud.com/v2.0</link>
                    </td>
                  </tr>
                  <tr>
                    <td>UK </td>
                    <td>
                        <link xlink:href="https://lon.identity.api.rackspacecloud.com/v2.0">https://lon.identity.api.rackspacecloud.com/v2.0</link>
                    </td>
                  </tr>
               </tbody>
            </informaltable>
         </para>
         <para>In response to valid credentials, an authentication request to the Rackspace Cloud Identity Service returns an authentication token and a
        service catalog that contains a list of all services and endpoints available for this token. Because the
        authentication token expires after 24 hours, you must generate a token once a day. </para>
         <para>For detailed information about the OpenStack Keystone Identity Service v2.0, see
        <link xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/index.html">
               <citetitle>Cloud Identity Client Developer Guide API
                v2.0</citetitle>
            </link>.
        For information about support for legacy identity endpoints, see
        <link xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Endpoints-d1e180.html">Alternate Authentication Endpoints</link>.</para>
         <sidebar audience="gs">
            <para>
               <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                  <listitem>
                    <para>
                        <link linkend="nova_auth">Authenticate with
                            the nova client</link>
                     </para>
                  </listitem>
                  <listitem>
                    <para>
                        <link linkend="curl_auth">Authenticate with
                            cURL</link>
                     </para>
                  </listitem>
               </itemizedlist>
            </para>
         </sidebar>
         <?hard-pagebreak?>

         <section xml:id="nova_auth" audience="gs">
            <title>Authenticate with the nova Client</title>
            <procedure>
               <title>To authenticate with the nova client:</title>
               <step>
                  <para>Get an authentication token: </para>
                  <programlisting language="bash" role="gutter: false">$ nova credentials</programlisting>

                  <para>Successful authentication returns user credentials, including ID, name, roles, and the authentication
                    token. The token appears in the <literal>id</literal> field in the <literal>Token</literal> box. </para>

                  <informalexample>
                    <screen><?db-font-size 50%?>+------------------+---------------------------------------------------------------------------------------+
| User Credentials | Value                                                                                 |
+------------------+---------------------------------------------------------------------------------------+
| id               | 170454                                                                                |
| name             | MyRackspaceAcct                                                                       |
| roles            | [{u'description': u'User Admin Role.', u'id': u'3', u'name': u'identity:user-admin'}] |
+------------------+---------------------------------------------------------------------------------------+
+---------+----------------------------------------+
| Token   | Value                                  |
+---------+----------------------------------------+
| expires | 2012-07-28T13:58:56.000-05:00          |
| id      | 1bd336d5-e0c6-49d9-b902-d3dbdc463062   |
| tenant  | {u'id': u'010101', u'name': u'010101'} |
+---------+----------------------------------------+</screen>
                  </informalexample>

                  <para>After you generate a token, the nova client automatically injects the token into any nova client
                    commands that you issue. </para>
                  <para>However, because the token expires after 24 hours, you must generate a new token once a day.</para>
               </step>

               <step>
                  <para>Get the service catalog with a list of endpoints: </para>
                  <programlisting language="bash" role="gutter: false">$ nova endpoints</programlisting>
                  <para>For each service, the response includes the public URL, which is the endpoint that you use to access
                    the service, the region, service name, tenant ID, the version ID, and endpoints that you can use to get
                    version information for the API. </para>
                  <para>To access the Cloud Networks or next generation Cloud Servers service, use the <code>publicURL</code>
                    value for the <literal>cloudServersOpenStack</literal> service. </para>
                  <para>The following output shows the information returned for the DFW region for the Cloud Networks or next
                    generation Cloud Servers service:</para>

                  <informalexample>
                    <screen><?db-font-size 50%?>+-----------------------+------------------------------------------------------+
| cloudServersOpenStack | Value                                                |
+-----------------------+------------------------------------------------------+
| publicURL             | https://dfw.servers.api.rackspacecloud.com/v2/010101 |
| region                | DFW                                                  |
| serviceName           | cloudServersOpenStack                                |
| tenantId              | 010101                                               |
| versionId             | 2                                                    |
| versionInfo           | https://dfw.servers.api.rackspacecloud.com/v2        |
| versionList           | https://dfw.servers.api.rackspacecloud.com/          |
+-----------------------+------------------------------------------------------+</screen>
                  </informalexample>


                  <para>The <literal>cloudServersOpenStack</literal> service might show multiple endpoints to enable regional
                    choice. Select the appropriate endpoint for the region that you want to interact with by examining the
                        <literal>region</literal> field.</para>
               </step>
               <step>
                  <para>Copy the values in the <literal>publicURL</literal> and <literal>tenantId</literal> fields for the
                        <literal>cloudServersOpenStack</literal> service for your region.</para>

               </step>
            </procedure>
            <sidebar audience="gs">
               <para>
                  <emphasis role="bold">Next step:</emphasis>
                  <xref linkend="create_first_net"/>
               </para>
            </sidebar>
         </section>
         <?hard-pagebreak?>
         <section xml:id="curl_auth">
            <title>Authenticate with cURL</title>
            <para>To authenticate, you issue a <command>POST</command> 
               <command>/tokens</command> request to the appropriate Rackspace Cloud
            Identity Service endpoint. </para>
            <para>In the request body, supply one of the following sets of credentials:</para>
            <itemizedlist>
               <listitem>
                  <para>user name and password</para>
               </listitem>
               <listitem>
                  <para>user name and API key</para>
               </listitem>
            </itemizedlist>
            <para>Your username and password are the ones that you use to log into the Rackspace Cloud Control Panel. </para>
            <para>To obtain your API key, log into
            <link xlink:href="http://mycloud.rackspace.com." xml:id="newwin">http://mycloud.rackspace.com</link>, click your
            username, and select <guilabel>API Keys</guilabel> to get your key.</para>
            <procedure>
               <title>To authenticate with cURL:</title>
               <step>
                  <para>Get an authentication token and a service catalog with a list of endpoints. </para>
                  <para>Use one of the following cURL commands to authenticate to the US Identity endpoint:</para>
                  <example>
                    <title>Authenticate with Username and Password: JSON Request</title>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 50%?>$ curl -s https://identity.api.rackspacecloud.com/v2.0/tokens -X 'POST' \
       -d '{"auth":{"passwordCredentials":{"username":"theUserName", "password":"thePassword"}}}' \
       -H "Content-Type: application/json" | python -m json.tool</programlisting>
                  </example>
                  <example>
                    <title>Authenticate with Username and API Key: JSON Request</title>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 50%?>$ curl -s https://identity.api.rackspacecloud.com/v2.0/tokens -X 'POST' \
       -d '{"auth":{"RAX-KSKEY:apiKeyCredentials":{"username":"theUserName", "apiKey":"0000000000000000000"}}}' \
       -H "Content-Type: application/json" | python -m json.tool</programlisting>
                  </example>
                  <note>
                    <para>For information about the json.tool, see <xref linkend="json_tool"/>.</para>
                  </note>
                  <para>In response to valid credentials, your request returns an authentication token and a service catalog
                    with the endpoints to request services. </para>
                  <para>Do not include explicit API endpoints in your scripts and applications. Instead, find the endpoint for
                    your service and region. </para>
                  <para>The following output shows a partial authentication response in JSON format: <example>
                        <title>Authenticate: JSON Response</title>
                        <programlistingco>
                            <areaspec>
                                <area xml:id="credentials.xml.endpoints"
                                    units="linecolumn"
                                    coords="37 32"/>
                                <area xml:id="credentials.xml.tenant" units="linecolumn" coords="41 47"/>
                                <area xml:id="credentials.xml.name" units="linecolumn" coords="55 50"/>
                                <area xml:id="credentials.xml.expires" units="linecolumn" coords="61 57"/>
                                <area xml:id="credentials.xml.token" units="linecolumn" coords="62 59"/>

                            </areaspec>
                            <programlisting language="json"><?db-font-size 55%?>{
    "access": {
        "serviceCatalog": [
            {
                "endpoints": [
                    {
                        "publicURL": "https://ord.loadbalancers.api.rackspacecloud.com/v1.0/010101", 
                        "region": "ORD", 
                        "tenantId": "010101"
                    }, 
                    {
                        "publicURL": "https://dfw.loadbalancers.api.rackspacecloud.com/v1.0/010101", 
                        "region": "DFW", 
                        "tenantId": "010101"
                    }
                ], 
                "name": "cloudLoadBalancers", 
                "type": "rax:load-balancer"
            }, 
            {
                "endpoints": [
                    {
                        "publicURL": "https://monitoring.api.rackspacecloud.com/v1.0/010101", 
                        "tenantId": "010101"
                    }
                ], 
                "name": "cloudMonitoring", 
                "type": "rax:monitor"
            }, 
            {
                "endpoints": [
                    {
                        "publicURL": "https://preprod.dfw.servers.api.rackspacecloud.com/v2/010101", 
                        "region": "DFW", 
                        "tenantId": "010101"
                    }
                ], 
                "name": "cloudServersPreprod", 
                "type": "compute"
            }, 
            {
                "endpoints": [
                    {
                        "internalURL": "https://snet-storage101.dfw1.clouddrive.com/v1/MossoCloudFS_530f8649-324c-499c-a075-2195854d52a7", 
                        "publicURL": "https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_530f8649-324c-499c-a075-2195854d52a7", 
                        "region": "DFW", 
                        "tenantId": "MossoCloudFS_530f8649-324c-499c-a075-2195854d52a7"
                    }
                ], 
                "name": "cloudFiles", 
                "type": "object-store"
            }, 
            {
                "endpoints": [
                    {
                        "publicURL": "https://servers.api.rackspacecloud.com/v1.0/010101", 
                        "tenantId": "010101", 
                        "versionId": "1.0", 
                        "versionInfo": "https://servers.api.rackspacecloud.com/v1.0", 
                        "versionList": "https://servers.api.rackspacecloud.com/"
                    }
                ], 
                "name": "cloudServers", 
                "type": "compute"
            }, 
            {
                "endpoints": [
                    {
                        "publicURL": "https://dfw.servers.api.rackspacecloud.com/v2/010101", 
                        "region": "DFW", 
                        "tenantId": "010101", 
                        "versionId": "2", 
                        "versionInfo": "https://dfw.servers.api.rackspacecloud.com/v2", 
                        "versionList": "https://dfw.servers.api.rackspacecloud.com/"
                    }, 
                    {
                        "publicURL": "https://ord.servers.api.rackspacecloud.com/v2/010101", 
                        "region": "ORD", 
                        "tenantId": "010101", 
                        "versionId": "2", 
                        "versionInfo": "https://ord.servers.api.rackspacecloud.com/v2", 
                        "versionList": "https://ord.servers.api.rackspacecloud.com/"
                    }
                ], 
                "name": "cloudServersOpenStack", 
                "type": "compute"
            }, 
            {
                "endpoints": [
                    {
                        "publicURL": "https://dns.api.rackspacecloud.com/v1.0/010101", 
                        "tenantId": "010101"
                    }
                ], 
                "name": "cloudDNS", 
                "type": "rax:dns"
            }, 
            {
                "endpoints": [
                    {
                        "publicURL": "https://ord.databases.api.rackspacecloud.com/v1.0/010101", 
                        "region": "ORD", 
                        "tenantId": "010101"
                    }, 
                    {
                        "publicURL": "https://dfw.databases.api.rackspacecloud.com/v1.0/010101", 
                        "region": "DFW", 
                        "tenantId": "010101"
                    }
                ], 
                "name": "cloudDatabases", 
                "type": "rax:database"
            }, 
            {
                "endpoints": [
                    {
                        "publicURL": "https://cdn1.clouddrive.com/v1/MossoCloudFS_530f8649-324c-499c-a075-2195854d52a7", 
                        "region": "DFW", 
                        "tenantId": "MossoCloudFS_530f8649-324c-499c-a075-2195854d52a7"
                    }
                ], 
                "name": "cloudFilesCDN", 
                "type": "rax:object-cdn"
            }
        ], 
        "token": {
            "expires": "2012-08-14T12:31:16.000-05:00", 
            "id": "459a28e0-777f-416c-8f22-9f6598fabd2f", 
            "tenant": {
                "id": "010101", 
                "name": "010101"
            }
        }, 
        "user": {
            "id": "01010156", 
            "name": "MyRackspaceAcct", 
            "roles": [
                {
                    "description": "User Admin Role.", 
                    "id": "3", 
                    "name": "identity:user-admin"
                }
            ]
        }
    }
}</programlisting>
                        </programlistingco>
                    </example>
                  </para>
                  <para>Successful authentication returns the following information: <calloutlist>
                        <callout arearefs="credentials.xml.endpoints">
                            <para>
                              <emphasis role="bold">Endpoints to request Rackspace Cloud services</emphasis>. Appears in
                                the <code>endpoints</code> element in the <code>serviceCatalog</code> element. </para>
                            <para>Endpoints information includes the public URL, which is the endpoint that you use to access
                                the service, region, tenant ID, and version information. </para>
                            <para condition="cn">To access the Cloud Networks or next generation Cloud Servers service, use
                                the endpoint for the <literal>cloudServersOpenStack</literal> service.</para>
                        </callout>
                        <callout arearefs="credentials.xml.tenant">
                            <para>
                              <emphasis role="bold">Tenant ID</emphasis>. Appears in the <literal>tenantId</literal>
                                field in the <literal>endpoints</literal> element. Also known as the account number. </para>
                            <para>You include the tenant ID in the endpoint URL when you call a Cloud service. </para>
                            <para>In the following example, you export the tenant ID, <literal>010101</literal>, to the
                                    <literal>account</literal> environment variable and the authentication token to the
                                    <literal>token</literal> environment variable. Then, you issue a cURL command, as
                                follows:</para>
                            <programlisting language="bash" role="gutter: false"><?db-font-size 60%?>$ export account="010101"
$ export token="00000000-0000-0000-000000000000"
$ curl -s https://dfw.servers.api.rackspacecloud.com/v2/$account/images/detail \
     -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                        </callout>
                        <callout arearefs="credentials.xml.name">
                            <para>
                              <emphasis role="bold">The name of the service</emphasis>. Appears in the <code>name</code>
                                field. </para>
                            <para>Locate the correct service name in the service catalog, as follows: </para>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                    <emphasis role="bold">First generation Cloud Servers</emphasis>. Named
                                            <literal>cloudServers</literal> in the catalog.</para>
                                    <para>If you use the authentication token to access this service, you can view and
                                        perform first generation Cloud Servers API operations against your first generation Cloud Servers. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                    <emphasis role="bold">Cloud Networks or next generation Cloud Servers</emphasis>.
                                        Named <literal>cloudServersOpenStack</literal> in the catalog.</para>
                                    <para>To access the Cloud Networks or next generation Cloud Servers service, use the
                                            <code>publicURL</code> value for the <literal>cloudServersOpenStack</literal>
                                        service.</para>
                                    <para>Might show multiple endpoints to enable regional choice. Select the appropriate
                                        endpoint for the region that you want to interact with by examining the
                                            <literal>region</literal> field.</para>
                                    <para>If you use the authentication token to access this service, you can view and
                                        perform Cloud Networks or next generation Cloud Servers API operations against your next generation Cloud Servers. To complete
                                        Cloud Networks API operations, you must also get access to this service. To request
                                        access, click
                                        <link xlink:href="http://www.iwantcloudnetworks.com/">here</link>.</para>
                                </listitem>
                            </itemizedlist>
                        </callout>
                        <callout arearefs="credentials.xml.expires">
                            <para>
                              <emphasis role="bold">Expiration date and time for authentication token</emphasis>. Appears
                                in the <code>expires</code> field in the <code>token</code> element.</para>
                            <para>After this date and time, the token is no longer valid. </para>
                            <para>This field predicts the maximum lifespan for a token, but does not guarantee that the token
                                reaches that lifespan. </para>
                            <para>Clients are encouraged to cache a token until it expires. </para>
                            <para>Because the authentication token expires after 24 hours, you must generate a token once a
                                day. </para>
                        </callout>
                        <callout arearefs="credentials.xml.token">
                            <para>
                              <emphasis role="bold">Authentication token</emphasis>. Appears in the <code>id</code> field
                                in the <code>token</code> element. </para>
                            <para>You pass the authentication token in the <code>X-Auth-Token</code> header each time that
                                you send a request to a service. </para>
                            <para>In the following example, you export the tenant ID, <literal>010101</literal>, to the
                                    <literal>account</literal> environment variable. You also export the authentication
                                token, <literal>00000000-0000-0000-000000000000</literal>, to the <literal>token</literal>
                                environment variable. Then, you issue a cURL command, as
                                follows:<programlisting language="bash" role="gutter: false"><?db-font-size 60%?>$ export account="010101"
$ export token="00000000-0000-0000-000000000000"
$ curl -s https://dfw.servers.api.rackspacecloud.com/v2/$account/images/detail \
     -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                           </para>
                        </callout>
                    </calloutlist>
                  </para>

               </step>
               <?sbr?>
               <step>
                  <para>Copy the values in the <literal>publicURL</literal> and <literal>tenantId</literal> fields for the
                        <literal>cloudServersOpenStack</literal> service for your region. </para>
                  <para>Copy the authentication token from the <literal>id</literal> field in the <literal>token</literal>
                    element. </para>
                  <para>In the next step, you set environment variables to these values. </para>
               </step>
            </procedure>

            <sidebar audience="gs">
               <para>
                  <emphasis role="bold">Next step:</emphasis>
                  <xref linkend="create_first_net"/>
               </para>
            </sidebar>
         </section>
      </section>
   </chapter>
    <chapter version="5.0"
            xml:id="create_first_net"
            xml:base="chapters/net_create_first_net.xml">
        <title>Create Your First Cloud Network</title>
        <para>Before creating your first network, choose whether to use the Neutron API or the nova-network API. For help
                deciding, see <xref linkend="section_nova_v_neutron"/>. The sections in this chapter provide examples of creating a
                network using each API.</para>
        <section xmlns:raxm="http://docs.rackspace.com/api/metadata"
               version="5.0"
               xml:id="create_first_net_neutron"
               xml:base="chapters/net_cfn_neutron.xml">
         <title>Create Your First Cloud Network Using Neutron</title>
         <para>These examples, using the Neutron API, walk you through the steps to create an isolated network and create a server
        that is attached your isolated network, showing you how to access the Cloud Networks API through neutron client
        commands or cURL commands so that you can quickly create isolated networks, subnets, and servers.</para>
         <para>The exercises also help you learn how cURL commands and the Cloud Networks neutron and nova-network APIs work. </para>

         <section version="5.0"
                  xml:id="task_flow_neutron"
                  xml:base="net_task_flow_neutron.xml">
            <title>High-Level Task Flow</title>
            <para> The high-level task flow for Cloud Networks involves creating a network, associating a subnet with that network,
        and booting a server that is attached to the network. Network cleanup includes deleting the server, deleting any
        ports associated with the network, and deleting the networks. Cloud Networks automatically deletes any subnets
        associated with the deleted network.</para>

            <procedure>
               <title>To Use Cloud Networks:  A High Level Flow</title>

               <step>
                  <title>Create a network.</title>
                  <para>The tenant (user) creates a network. </para>
                  <para>For example, the tenant creates the <code>net1</code> network. Its ID is <literal>net1_id</literal>.</para>
               </step>

               <step>
                  <title>Associate a subnet with the network.</title>
                  <para>The tenant associates a subnet with that network.</para>
                  <para>For example, the tenant associates the 10.0.0.0/24 subnet with the <code>net1</code> network.</para>
               </step>

               <step>
                  <title>Boot (or create) a server and attach it to the network.</title>
                  <para>The tenant boots a server and specifies a single NIC that connects to the network.</para>
                  <para>The following examples use the nova client to boot a server.</para>
                  <para>In the following example, nova contacts Cloud Networks to create the NIC and attach it to the
                    <code>net1</code> network, with the ID <literal>net1_id</literal>:</para>
                  <programlisting>$ nova boot <replaceable>serverName</replaceable> --image <replaceable>image</replaceable> --flavor <replaceable>flavor</replaceable> --nic net-id=<replaceable>net1_id</replaceable>
                  </programlisting>
                  <para>In the following example, nova first creates the <code>port1</code> port, and then boots the server with a
                specified port. Cloud Networks creates a NIC and attaches it to the port <code>port1</code>, with the ID
                    <literal>port1_id</literal>:</para>
                  <programlisting>$ nova boot <replaceable>serverName</replaceable> --image <replaceable>image</replaceable> --flavor <replaceable>flavor</replaceable> --nic port-id=<replaceable>port1_id</replaceable>
                  </programlisting>
                  <para>Cloud Networks chooses and assigns an IP address to the <code>port1</code> port.</para>

               </step>

               <step>
                  <title>Delete the server.</title>
                  <para>The tenant deletes the server.</para>
                  <para>The Cloud Servers service contacts the Cloud Networks service and deletes the <code>port1</code>
                port.</para>
                  <para>Upon deletion, the allocated IP address is returned to the pool of available IP addresses.</para>
               </step>

               <step>
                  <title>Delete any ports.</title>
                  <para>If the tenant created any ports and associated them with the network, the tenant deletes the ports.</para>
               </step>

               <step>
                  <title>Delete the network.</title>
                  <para>The tenant deletes the network. This operation deletes a Cloud Networks network and its associated subnets,
                provided that no port is currently configured on the network.</para>
               </step>
            </procedure>

         </section>
         <section version="5.0"
                  xml:id="create_network_neutron"
                  xml:base="net_cfn_create_network_neutron.xml">
            <title>Step 1. Create an Isolated Network</title>
            <para>Before you create a server, you create an isolated network that you can attach to your new server. </para>
            <para>To create an isolated network, you specify a name and an admin_state for your network.</para>
            <para>After you create an isolated network, copy its network ID. You use this ID to attach the network to your server
        when you create your server.</para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="neutron_create_network_neutron"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_create_network_neutron"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <?hard-pagebreak?>
            <section xml:id="neutron_create_network_neutron">
               <title>Create an Isolated Network with the neutron Client </title>
               <para>
                  <procedure>
                     <title>To create an isolated network with the neutron client</title>
                     <step>
                        <para>Issue the following neutron command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
$ neutron net-create &lt;amp&gt;</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional arguments:</emphasis>
                        </para>
                        <para>
                           <itemizedlist>
                              <listitem>
                                <para>The network name. In this example, the name is <literal>amp</literal>.</para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The command returns the response, as shown in the following output:</para>
                        <informalexample>
                           <screen><?db-font-size 75%?>
+----------------+--------------------------------------+
| Field          | Value                                |
+----------------+--------------------------------------+
| admin_state_up | True                                 |
| id             | 29f52c7e-6efd-4335-a14a-db77d32a2555 |
| name           | amp                                  |
| shared         | False                                |
| status         | ACTIVE                               |
| subnets        |                                      |
| tenant_id      | 53501b3c25d34f8ea293c03298caed60     |
+----------------+--------------------------------------+</screen>
                        </informalexample>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output. You will use this value when you create a
                        subnet, provision your server, or perform other related activities.</para>
                     </step>
                  </procedure>
               </para>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="create_subnet_neutron"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_create_network_neutron">
               <title>Create an Isolated Network with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="json_create_network_neutron">
                  <title>JSON Request and Response</title>
                  <procedure>
                     <title>To create an isolated network and request a JSON response</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            $ curl -s https://dfw.servers.api.rackspacecloud.com/v2.0/networks \
       -X POST \
       -H "Content-Type: application/json" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $token" \
       -d '{"network": {"name": "sample_network", "admin_state_up": "false"}}' | python -m json.tool</programlisting>
                        </para>
                        <para>In this cURL command, you specify several options. For information about options, see <xref linkend="curl_options"/>.</para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The operation returns the response body, as shown in the following JSON response:
                        <programlisting language="json"><?db-font-size 65%?>
                            {
   "network":{
      "status":"ACTIVE",
      "subnets":[
      
      ],
      "name":"sample_network",
      "provider:physical_network":null,
      "admin_state_up":true,
      "tenant_id":"4fd44f30292945e481c7b8a0c8908869",
      "provider:network_type":"local",
      "shared":false,
      "id":"baed79dd-9136-4260-b9a9-d9dfa2bf6547",
      "provider:segmentation_id":null
   }
}
</programlisting>
                        </para>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output. You will use this value when you create a
                        subnet, provision your server, or perform other related activities.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="create_subnet_neutron"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="xml_create_network_neutron">
                  <title>XML Request and Response</title>
                  <procedure>
                     <title>To create an isolated network and request a XML response</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            $ curl -i https://dfw.servers.api.rackspacecloud.com/v2.0/networks.xml \
          -X POST -H "X-Auth-Project-Id: $account" -H "Content-Type: application/xml" \
          -H "Accept: application/xml" \
          -H "X-Auth-Token: $token" \
          -d 'network name="sample_network" admin_state_up="false"'</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The operation returns the response body, as shown in the following XML response:
                        <programlisting language="xml"><?db-font-size 65%?>
                            &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;network xmlns="http://openstack.org/quantum/api/v2.0"
    xmlns:provider="http://docs.openstack.org/ext/provider/api/v1.0"
    xmlns:quantum="http://openstack.org/quantum/api/v2.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;status&gt;ACTIVE&lt;/status&gt;
    &lt;subnets quantum:type="list"/&gt;
    &lt;name&gt;sample_network2&lt;/name&gt;
    &lt;provider:physical_network xsi:nil="true"/&gt;
    &lt;admin_state_up quantum:type="bool"&gt;True&lt;/admin_state_up&gt;
    &lt;tenant_id&gt;4fd44f30292945e481c7b8a0c8908869&lt;/tenant_id&gt;
    &lt;provider:network_type&gt;local&lt;/provider:network_type&gt;
    &lt;shared quantum:type="bool"&gt;False&lt;/shared&gt;
    &lt;id&gt;c220b026-ece1-4ead-873f-83537f4c9f92&lt;/id&gt;
    &lt;provider:segmentation_id xsi:nil="true"/&gt;
&lt;/network&gt;
</programlisting>
                        </para>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output. You will use this value when you create a
                        subnet, provision your server, or perform other related activities.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="create_subnet_neutron"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section version="5.0"
                  xml:id="create_subnet_neutron"
                  xml:base="net_cfn_create_subnet_neutron.xml">
            <title>Step 2. Create a Subnet</title>
            <para>After creating a network, you can create a subnet. </para>
            <para>To create a subnet, you specify a network, an IP address, and a name for your subnet.</para>
            <para>After you create a subnet, copy its subnet ID for future reference.</para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="neutron_create_network_neutron"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_create_network_neutron"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <?hard-pagebreak?>
            <section xml:id="neutron_create_subnet_neutron">
               <title>Create a Subnet with the neutron Client </title>
               <para>
                  <procedure>
                     <title>To create a subnet with the neutron client</title>
                     <step>
                        <para>Issue the following neutron command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
$ neutron subnet-create &lt;amp&gt; &lt;120.1.2.0/24&gt; --name &lt;Subamp&gt;</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional arguments:</emphasis>
                        </para>
                        <para>
                           <itemizedlist>
                              <listitem>
                                <para>The name of the network you previously created. In this example, the name is
                                        <literal>amp</literal>.</para>
                              </listitem>
                              <listitem>
                                <para>The IP address and port you want to use for the subnet. In this example, the address is
                                        <literal>120.1.2.0/24</literal>
                                 </para>
                              </listitem>
                              <listitem>
                                <para>
                                    <parameter>name</parameter>. The name for the new subnet. In this example, the name is
                                        <literal>Subamp</literal>.</para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The command returns the response, as shown in the following output:</para>
                        <informalexample>
                           <screen><?db-font-size 75%?>
+------------------+----------------------------------------------+
| Field            | Value                                        |
+------------------+----------------------------------------------+
| allocation_pools | {"start": "120.1.2.2", "end": "120.1.2.254"} |
| cidr             | 120.1.2.0/24                                 |
| dns_nameservers  |                                              |
| enable_dhcp      | True                                         |
| gateway_ip       | 120.1.2.1                                    |
| host_routes      |                                              |
| id               | 23e3059e-4f39-4f7f-8cf2-c326e5de6c37         |
| ip_version       | 4                                            |
| name             | Subamp                                       |
| network_id       | 29f52c7e-6efd-4335-a14a-db77d32a2555         |
| tenant_id        | 53501b3c25d34f8ea293c03298caed60             |
+------------------+----------------------------------------------+</screen>
                        </informalexample>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output for future reference.</para>
                     </step>
                  </procedure>
               </para>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="list_networks_neutron"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_create_subnet_neutron">
               <title>Create a Subnet with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="json_create_subnet_neutron">
                  <title>JSON Request and Response</title>
                  <procedure>
                     <title>To create a subnet and request a JSON response</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            $ curl -s https://dfw.servers.api.rackspacecloud.com/v2.0/$account/subnets \
       -X POST \
       -H "Content-Type: application/json" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $token" \
       -d '{"subnets":[{"cidr":"120.1.2.0/24","ip_version":4,"network_id":"29f52c7e-6efd-4335-a14a-db77d32a2555"}]}' \
       | python -m json.tool</programlisting>
                        </para>
                        <para>In this cURL command, you specify several options. For information about options, see <xref linkend="curl_options"/>.</para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The operation returns the response body, as shown in the following JSON response:
                        <!--<programlisting language="json"><?db-font-size 65%?>
                            <xi:include href="../../common/samples/network-post-resp.json" parse="text"/></programlisting>--></para>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output for future reference.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_networks_neutron"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="xml_create_subnet_neutron">
                  <title>XML Request and Response</title>
                  <procedure>
                     <title>To create a subnet and request a XML response</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            $ curl -s https://dfw.servers.api.rackspacecloud.com/v2.0/$account/subnets \
          -X POST -H "X-Auth-Project-Id: $account" -H "Content-Type: application/xml" \
          -H "Accept: application/xml" \
          -H "X-Auth-Token: $token" \
          -d '{"subnets":[{"cidr":"120.1.2.0/24","ip_version":4,"network_id":"29f52c7e-6efd-4335-a14a-db77d32a2555"}]}' \
       | python -m json.tool</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The operation returns the response body, as shown in the following XML response:
                        <!--<programlisting language="xml"><?db-font-size 65%?>
                            <xi:include href="../../common/samples/network-post-resp.xml" parse="text"/></programlisting>--></para>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output for future reference.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_networks_neutron"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section version="5.0"
                  xml:id="list_networks_neutron"
                  xml:base="net_cfn_list_networks_neutron.xml">
            <title>Step 3. List Networks</title>
            <para>After you create an isolated network, list networks to view your network and the Rackspace networks.</para>
            <para>For information about the Rackspace networks, see <xref linkend="networks"/>. </para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                <!--<listitem>
                    <para><olink targetdoc="cn-gettingstarted" targetptr="nova_list_networks_neutron">“List Networks with the
                            nova Client”</olink></para>
                </listitem>-->
                     <listitem>
                        <para>
                           <xref linkend="neutron_list_networks_neutron"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_list_networks_neutron"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <!--    <section xml:id="nova_list_networks_neutron">
        <title>List Networks with the nova Client</title>
        <procedure>
            <title>To list networks with the nova client</title>
            <step>
                <para>Issue the following nova client command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        <prompt>$</prompt> nova network-list </programlisting></para>
                <para><emphasis role="bold">Output:</emphasis></para>
                <para>For each network, the command returns the result as shown in the following output</para>
                <informalexample>
                    <screen><computeroutput><?db-font-size 75%?>+-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| Property       | Value                                    |
+-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| status         | ACTIVE                                   |
| subnets        | ["e12f0c45-46e3-446a-b207-9474b27687a6"] |
| admin_state_up | true                                     |
| name           | private                                  |
| tenant_id      | "625887121e364204873d362b553ab171"       |
| id             | 9d83c053-b0a4-4682-ae80-c00df269ce0a     |
| shared         | false                                    |
+-\-\-\-\-\-\-\-\-\-+-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+</computeroutput></screen>
                </informalexample>

                <para>In the network list, ServiceNet is labeled as <literal>private</literal>, and PublicNet is labeled as
                        <literal>public</literal>.</para>
            </step>
        </procedure>
        <sidebar>
            <para><emphasis role="bold">Next step:</emphasis><olink targetdoc="cn-gettingstarted"
                    targetptr="show_network_neutron">“Step 3. Show Network Information”</olink></para>
        </sidebar>
    </section>-->
            <?hard-pagebreak?>
            <section xml:id="neutron_list_networks_neutron">
               <title>List Networks with the neutron Client</title>
               <procedure>
                  <title>To list networks with the neutron client</title>
                  <step>
                     <para>Issue the following neutron client command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
$ neutron net-list </programlisting>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                     <para>For each network, the command returns the result as shown in the following output</para>
                     <informalexample>
                        <screen><?db-font-size 75%?>
+--------------------------------------+---------+-----------------------------------------------------+
| id                                   | name    | subnets                                             |
+--------------------------------------+---------+-----------------------------------------------------+
| 29f52c7e-6efd-4335-a14a-db77d32a2555 | amp     | 23e3059e-4f39-4f7f-8cf2-c326e5de6c37 120.1.2.0/24   |
+--------------------------------------+---------+-----------------------------------------------------+</screen>
                     </informalexample>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="show_network_neutron"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_list_networks_neutron">
        <?dbhtml stop-chunking?>
               <title>List Networks with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="list_networks_json_neutron">
                  <title>JSON Request and Response</title>
                  <procedure>
                     <title>To list networks and request a JSON response</title>
                     <step>
                        <para>Issue the following cURL command: <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ curl https://dfw.servers.api.rackspacecloud.com/v2.0/$account/networks \
       -X GET -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The API operation returns a response body as shown in the following output:
                        <programlisting language="json"><?db-font-size 75%?>
                            {
   "networks":[
      {
         "status":"ACTIVE",
         "subnets":[
            "54d6f61d-db07-451c-9ab3-b9609b6b6f0b"
         ],
         "name":"private-network",
         "provider:physical_network":null,
         "admin_state_up":true,
         "tenant_id":"4fd44f30292945e481c7b8a0c8908869",
         "provider:network_type":"local",
         "router:external":true,
         "shared":true,
         "id":"d32019d3-bc6e-4319-9c1d-6722fc136a22",
         "provider:segmentation_id":null
      },
      {
         "status":"ACTIVE",
         "subnets":[
            "08eae331-0402-425a-923c-34f7cfe39c1b"
         ],
         "name":"private",
         "provider:physical_network":null,
         "admin_state_up":true,
         "tenant_id":"26a7980765d0414dbc1fc1f88cdb7e6e",
         "provider:network_type":"local",
         "router:external":true,
         "shared":true,
         "id":"db193ab3-96e3-4cb3-8fc5-05f4296d0324",
         "provider:segmentation_id":null
      }
   ]
}
</programlisting>
                        </para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="show_network_neutron"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="list_networks_xml_neutron">
                  <title>XML Request and Response</title>
                  <procedure>
                     <title>To list networks and request an XML response</title>
                     <step>
                        <para>Issue the following cURL command:<programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $curl -i https://dfw.servers.api.rackspacecloud.com/v2.0/$account/networks.xml \
        -H "Content-Type: application/xml" \
        -H "Accept: application/xml" \
        -X GET -H "X-Auth-Token: $token" </programlisting>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The API operation returns a response body as shown in the following output:
                        <programlisting language="xml"><?db-font-size 75%?>
                            &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;networks xmlns="http://openstack.org/quantum/api/v2.0"
    xmlns:provider="http://docs.openstack.org/ext/provider/api/v1.0"
    xmlns:quantum="http://openstack.org/quantum/api/v2.0"
    xmlns:router="http://docs.openstack.org/ext/neutron/router/api/v1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;network&gt;
        &lt;status&gt;ACTIVE&lt;/status&gt;
        &lt;subnets&gt;
            &lt;subnet&gt;54d6f61d-db07-451c-9ab3-b9609b6b6f0b&lt;/subnet&gt;
        &lt;/subnets&gt;
        &lt;name&gt;private-network&lt;/name&gt;
        &lt;provider:physical_network xsi:nil="true"/&gt;
        &lt;admin_state_up quantum:type="bool"&gt;True&lt;/admin_state_up&gt;
        &lt;tenant_id&gt;4fd44f30292945e481c7b8a0c8908869&lt;/tenant_id&gt;
        &lt;provider:network_type&gt;local&lt;/provider:network_type&gt;
        &lt;router:external quantum:type="bool"&gt;True&lt;/router:external&gt;
        &lt;shared quantum:type="bool"&gt;True&lt;/shared&gt;
        &lt;id&gt;d32019d3-bc6e-4319-9c1d-6722fc136a22&lt;/id&gt;
        &lt;provider:segmentation_id xsi:nil="true"/&gt;
    &lt;/network&gt;
    &lt;network&gt;
        &lt;status&gt;ACTIVE&lt;/status&gt;
        &lt;subnets&gt;
            &lt;subnet&gt;08eae331-0402-425a-923c-34f7cfe39c1b&lt;/subnet&gt;
        &lt;/subnets&gt;
        &lt;name&gt;private&lt;/name&gt;
        &lt;provider:physical_network xsi:nil="true"/&gt;
        &lt;admin_state_up quantum:type="bool"&gt;True&lt;/admin_state_up&gt;
        &lt;tenant_id&gt;26a7980765d0414dbc1fc1f88cdb7e6e&lt;/tenant_id&gt;
        &lt;provider:network_type&gt;local&lt;/provider:network_type&gt;
        &lt;router:external quantum:type="bool"&gt;True&lt;/router:external&gt;
        &lt;shared quantum:type="bool"&gt;True&lt;/shared&gt;
        &lt;id&gt;db193ab3-96e3-4cb3-8fc5-05f4296d0324&lt;/id&gt;
        &lt;provider:segmentation_id xsi:nil="true"/&gt;
    &lt;/network&gt;
&lt;/networks&gt;
</programlisting>
                        </para>
                        <para>ServiceNet is labeled as <literal>private</literal> and PublicNet is labeled as
                            <literal>public</literal> in the network list.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="show_network_neutron"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <!--<xi:include href="net_cfn_list_subnets_neutron.xml"/>-->
         <!--<xi:include href="net_cfn_provision_server_neutron.xml"/>-->
         <!--<xi:include href="net_cfn_add_port_neutron.xml"/>-->
         <section version="5.0"
                  xml:id="show_network_neutron"
                  xml:base="net_cfn_show_network_neutron.xml">
            <title>Step 3. Show Network Information</title>
            <para>You can show details for a specified network ID.</para>
            <para>The response body returns the following fields: <table rules="all" width="100%">
                  <caption>Show Network Response Fields</caption>
                  <col width="20%"/>
                  <col width="80%"/>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>status</td>
                        <td>The status for an isolated private network.</td>
                     </tr>
                     <tr>
                        <td>subnets</td>
                        <td>An array of subnets for an isolated private network.</td>
                     </tr>
                     <tr>
                        <td>name</td>
                        <td>The name of an isolated private network.</td>
                     </tr>
                     <tr>
                        <td>admin_state_up</td>
                        <td>The status for an isolated private network.</td>
                     </tr>
                     <tr>
                        <td>tenant_id</td>
                        <td>The tenant_id of the network owner.</td>
                     </tr>
                     <tr>
                        <td>id</td>
                        <td>The network ID.</td>
                     </tr>
                     <tr>
                        <td>shared</td>
                        <td>Indicates whether this network is shared across all tenants.</td>
                     </tr>
                  </tbody>
               </table>
            </para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_show_network_neutron"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_show_network_neutron"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <?hard-pagebreak?>
            <section xml:id="nova_show_network_neutron">
               <title>Show Network Information with the nova Client</title>
               <procedure>
                  <title>To show information for a specified network ID</title>
                  <step>
                     <para>Issue the following nova client command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ nova network &lt;id&gt;</programlisting>
                     </para>
                     <para>
                        <emphasis role="bold">Positional argument:</emphasis>
                     </para>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <parameter>id</parameter>. The ID of the network for which you want to show information. To
                                determine the network ID, issue a <command>nova</command>
                                <option>network-list</option> command. </para>
                           </listitem>
                        </itemizedlist>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                     <para>The command returns the result as shown in the following output:</para>
                     <informalexample>
                        <screen>+----------------+------------------------------------------+
| Property       | Value                                    |
+----------------+------------------------------------------+
| status         | ACTIVE                                   |
| subnets        | ["e12f0c45-46e3-446a-b207-9474b27687a6"] |
| admin_state_up | true                                     |
| name           | private                                  |
| tenant_id      | "625887121e364204873d362b553ab171"       |
| id             | 9d83c053-b0a4-4682-ae80-c00df269ce0a     |
| shared         | false                                    |
+----------+--------------------------------------+</screen>
                     </informalexample>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="delete_network"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_show_network_neutron">
               <title>Show Network with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="json_show_network_curl_neutron">
                  <title>JSON Request and Response</title>
                  <procedure>
                     <title>To show information in a JSON response for a specified network ID</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2.0/$account/networks/{id} \
        -X GET \
        -H "X-Auth-Project-Id: $account" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json"\
        -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional argument:</emphasis>
                        </para>
                        <para>
                           <itemizedlist>
                              <listitem>
                                <para>
                                    <parameter>id</parameter>. The ID of the network for which you want to show
                                    information. To determine the network ID, issue a <command>nova</command>
                                    <option>network-list</option> command. </para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The API operation returns a response body as shown in the following output:</para>

                        <programlisting language="json"><?db-font-size 75%?>
                        {
   "network":{
      "status":"ACTIVE",
      "subnets":[
         "54d6f61d-db07-451c-9ab3-b9609b6b6f0b"
      ],
      "name":"private-network",
      "provider:physical_network":null,
      "admin_state_up":true,
      "tenant_id":"4fd44f30292945e481c7b8a0c8908869",
      "provider:network_type":"local",
      "router:external":true,
      "shared":true,
      "id":"d32019d3-bc6e-4319-9c1d-6722fc136a22",
      "provider:segmentation_id":null
   }
}
</programlisting>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="delete_network"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="xml_show_network_curl_neutron">
                  <title>XML Request and Response</title>
                  <procedure>
                     <title>To show information in an XML response for a specified network ID</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2.0/$account/networks/{id}.xml \
        -X GET \
        -H "X-Auth-Project-Id: $account" \
        -H "Accept: application/xml" \
        -H "Content-Type: application/xml"\
        -H "X-Auth-Token: $token"</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional argument:</emphasis>
                        </para>
                        <para>
                           <itemizedlist>
                              <listitem>
                                <para>
                                    <parameter>id</parameter>. The ID of the network for which you want to show
                                    information. To determine the network ID, issue a <command>nova</command>
                                    <option>network-list</option> command. </para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The API operation returns the response body as shown in the following output:</para>

                        <programlisting language="xml"><?db-font-size 75%?>
                        &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;network xmlns="http://openstack.org/quantum/api/v2.0"
    xmlns:provider="http://docs.openstack.org/ext/provider/api/v1.0"
    xmlns:quantum="http://openstack.org/quantum/api/v2.0"
    xmlns:router="http://docs.openstack.org/ext/neutron/router/api/v1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;status&gt;ACTIVE&lt;/status&gt;
    &lt;subnets&gt;
        &lt;subnet&gt;54d6f61d-db07-451c-9ab3-b9609b6b6f0b&lt;/subnet&gt;
    &lt;/subnets&gt;
    &lt;name&gt;private-network&lt;/name&gt;
    &lt;provider:physical_network xsi:nil="true"/&gt;
    &lt;admin_state_up quantum:type="bool"&gt;True&lt;/admin_state_up&gt;
    &lt;tenant_id&gt;4fd44f30292945e481c7b8a0c8908869&lt;/tenant_id&gt;
    &lt;provider:network_type&gt;local&lt;/provider:network_type&gt;
    &lt;router:external quantum:type="bool"&gt;True&lt;/router:external&gt;
    &lt;shared quantum:type="bool"&gt;True&lt;/shared&gt;
    &lt;id&gt;d32019d3-bc6e-4319-9c1d-6722fc136a22&lt;/id&gt;
    &lt;provider:segmentation_id xsi:nil="true"/&gt;
&lt;/network&gt;
</programlisting>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="delete_network"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section version="5.0"
                  xml:id="delete_network_neutron"
                  xml:base="net_cfn_delete_network_neutron.xml">
            <title>Step 4. Delete Your Network</title>
            <para>If you no longer need your network, you can delete it. </para>
            <para>You cannot delete an isolated network unless the network is not attached to any server.</para>
            <para>To detach a network from a server, you must delete the virtual interface for the network from the server. Then, you
        can delete the network.</para>

            <para>After the network is deleted, it no longer appears in the list of networks.</para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_delete_network_neutron"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_delete_network_neutron"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <section xml:id="nova_delete_network_neutron">
               <title>Delete Network with the nova Client</title>
               <procedure>
                  <title>To delete a specified network</title>
                  <step>
                     <title>Delete the virtual interface for the network from the server</title>
                     <para>To detach a network from a server, first delete the virtual interface for the network from the server.
                </para>
                  </step>
                  <step>
                     <title>Delete the network</title>
                     <para>Issue the following nova client command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ nova network-delete &lt;id&gt;</programlisting>
                     </para>
                     <para>
                        <emphasis role="bold">Positional argument:</emphasis>
                     </para>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <parameter>id</parameter>. The network ID of the network that you want to delete. To
                                determine the network ID, issue a <command>nova</command>
                                <option>network-list</option> command.</para>
                           </listitem>
                        </itemizedlist>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis> None.</para>
                  </step>
               </procedure>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_delete_network_neutron">
               <title>Delete Network with cURL</title>
               <procedure>
                  <title>To delete a specified network</title>
                  <step>
                     <title>Delete the virtual interface for the network from the server</title>
                     <para>To detach a network from a server, first delete the virtual interface for the network from the server.
                </para>
                  </step>
                  <step>
                     <title>Delete the network</title>
                     <para>Issue the following cURL command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>
                        $ curl -i https://dfw.servers.api.rackspacecloud.com/v2.0/$account/networks/{id} \
       -X 'DELETE' \
       -H "X-Auth-Token: $token" \
       -H "X-Auth-Project-Id: $account" \
       -H "Accept: application/json" </programlisting>
                     </para>
                     <note>
                        <para>Include the <option>-i</option> option in the cURL command to show the response header. Omit the
                            <code>| python -m json.tool</code> clause from the command because the API operation does not
                        return a JSON response.</para>
                     </note>
                     <para>
                        <emphasis role="bold">Argument:</emphasis>
                     </para>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <parameter>id</parameter>. The network ID of the network that you want to delete. To
                                determine the network ID, issue a <command>nova</command>
                                <option>network-list</option> command.</para>
                           </listitem>
                        </itemizedlist>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                     <para>Successful deletion returns an <errortext>Accepted</errortext> (<returnvalue>202</returnvalue>)
                    response code:</para>
                     <screen>HTTP/1.1 202 Accepted
Date: Thu, 04 Oct 2012 16:23:30 GMT
Content-Length: 58
Content-Type: text/html;charset=UTF-8
Server: Jetty(8.0.y.z-SNAPSHOT)

202 Accepted

The request is accepted for processing.</screen>
                  </step>
               </procedure>
            </section>

         </section>
      </section>
        <section xmlns:raxm="http://docs.rackspace.com/api/metadata"
               version="5.0"
               xml:id="create_first_net_nova"
               xml:base="chapters/net_cfn_nova.xml">
         <info>
            <title>Create Your First Cloud Network Using Nova-network</title>
        
         </info>
         <para>These examples, using the Nova-network API, walk you through the steps to create an isolated network and create a
        server that is attached your isolated network, showing you how to access the Cloud Networks API through nova client
        commands or cURL commands so that you can quickly create isolated networks and servers.</para>
         <para>The exercises also help you learn how cURL commands and the Cloud Networks API work. </para>

         <section version="5.0"
                  xml:id="create_network"
                  xml:base="net_cfn_create_network_nova.xml">
            <title>Step 1. Create an Isolated Network</title>
            <para>Before you create a server, you create an isolated network that you can attach to your new server. </para>
            <para>To create an isolated network, you specify a name for your network and a Classless Inter-Domain Routing
            (<glossterm>CIDR</glossterm>). A CIDR is a range of IP addresses used by a network. A CIDR address looks like a
        normal IP address except that it ends with a slash followed by a number. The number after the slash represents the
        number of addresses in the range. For more information, see
        <link xlink:href="http://www.rackspace.com/knowledge_center/article/using-cidr-notation">
                  <citetitle>CIDR
                Notation</citetitle>
               </link>.</para>
            <itemizedlist>
               <title>Limitations</title>
               <listitem>
                  <para>The isolated network must exist in the same region as the Cloud Server.</para>
               </listitem>
               <listitem>
                  <para>You can create up to three isolated networks with up to 64 servers attached to each one.</para>
               </listitem>
               <listitem>
                  <para>After you create an isolated network, you cannot rename it.</para>
               </listitem>
            </itemizedlist>

            <para>For a full list of limitations, see the
        <link xlink:href="http://docs.rackspace.com/servers/api/v2/cn-releasenotes/content/nova-boot.html">
                  <citetitle>Cloud Networks Release Notes</citetitle>
               </link>.</para>
            <para>After you create an isolated network, copy its network ID. You use this ID to attach the network to your server
        when you create your server.</para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_create_network"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_create_network"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <section xml:id="nova_create_network">
               <title>Create an Isolated Network with the nova Client </title>
               <para>
                  <procedure>
                     <title>To create an isolated network with the nova client</title>
                     <step>
                        <para>Issue the following command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ nova network-create &lt;network_label&gt; &lt;cidr&gt;</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional arguments:</emphasis>
                        </para>
                        <para>
                           <itemizedlist>
                              <listitem>
                                <para>
                                    <parameter>network_label</parameter>. The network label, such as
                                        <literal>my_new_network</literal>, </para>
                              </listitem>
                              <listitem>
                                <para>
                                    <parameter>cidr</parameter>. The IP block from which to allocate, such as
                                        <literal>172.16.0.0/24</literal> or <literal>2001:DB8::/64</literal>.</para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The command returns the CIDR, ID, and label for the new network, as shown in the following
                        output:</para>
                        <informalexample>
                           <screen><?db-font-size 75%?>+----------+--------------------------------------+
| Property | Value                                |
+----------+--------------------------------------+
| cidr     | 192.168.0.0/24                       |
| id       | 1f84c238-b05a-4374-a0cb-aa6140032cd1 |
| label    | new_network                          |
+----------+--------------------------------------+</screen>
                        </informalexample>

                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output. In this example, the <literal>id</literal>
                        value is <literal>1f84c238-b05a-4374-a0cb-aa6140032cd1</literal>, but use the value returned for your
                        network.</para>
                        <para>You will use this value when you provision your server in the next step.</para>
                     </step>
                  </procedure>
               </para>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="list_networks"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_create_network">
               <title>Create an Isolated Network with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="json_create_network">
                  <title>JSON Request and Response</title>
                  <procedure>
                     <title>To create an isolated network and request a JSON response</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            $ curl -s https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2 \
       -X POST \
       -H "X-Auth-Project-Id: $account" \
       -H "Content-Type: application/json" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $token" \
       -d '{"network": {"cidr": "192.168.0.0/24", "label": "superprivate"}}' | python -m json.tool</programlisting>
                        </para>
                        <para>In this cURL command, you specify several options. For information about options, see <xref linkend="curl_options"/>.</para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The response returns the <glossterm>CIDR</glossterm>, ID, and label for the isolated network, as
                        shown in the following JSON response:
                        <programlisting language="json"><?db-font-size 65%?>
                            {
    "network": {
        "cidr": "192.168.0.0/24", 
        "id": "1ff4489e-db0e-45a6-8c9f-4616c6ef5db1", 
        "label": "superprivate"
    }
}</programlisting>
                        </para>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output. In this example, the <literal>id</literal>
                        value is <literal>1f84c238-b05a-4374-a0cb-aa6140032cd1</literal>, but use the value returned for your
                        network.</para>
                        <para>You will use this value when you provision your server in the next step.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_networks"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="xml_create_network">
                  <title>XML Request and Response</title>
                  <procedure>
                     <title>To create an isolated network and request a XML response</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 70%?>
                            $ curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2.xml \
          -X POST -H "X-Auth-Project-Id: $account" -H "Content-Type: application/xml" \
          -H "Accept: application/xml" \
          -H "X-Auth-Token: $token" \
          -d '&lt;network cidr="192.168.0.0/24" label="superprivate_xml" /&gt;'</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The response returns the <glossterm>CIDR</glossterm>, ID, and label for the isolated network, as
                        shown in the following XML response:
                        <programlisting language="xml"><?db-font-size 65%?>
                            &lt;network&gt;
    &lt;cidr&gt;192.168.0.0/24&lt;/cidr&gt;
    &lt;id&gt;f212726e-6321-4210-9bae-a13f5a33f83f&lt;/id&gt;
    &lt;label&gt;superprivate_xml&lt;/label&gt;
&lt;/network&gt;
</programlisting>
                        </para>
                     </step>
                     <step>
                        <para>Copy the <literal>id</literal> value from the output. In this example, the <literal>id</literal>
                        value is <literal>1f84c238-b05a-4374-a0cb-aa6140032cd1</literal>, but use the value returned for your
                        network.</para>
                        <para>You will use this value when you provision your server in the next step.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_networks"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section version="5.0"
                  xml:id="list_networks"
                  xml:base="net_cfn_list_networks_nova.xml">
            <title>Step 2. List Networks</title>
            <para>After you create an isolated network, list networks to view your network and the Rackspace networks.</para>
            <para>For information about the Rackspace networks, see <xref linkend="networks"/>. </para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_list_networks"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_list_networks"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <section xml:id="nova_list_networks">
               <title>List Networks with the nova Client</title>
               <procedure>
                  <title>To list networks with the nova client</title>
                  <step>
                     <para>Issue the following nova client command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ nova network-list </programlisting>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                     <para>For each network, the command returns the network ID, label, and <glossterm>CIDR</glossterm>, as shown
                    in the following output:</para>
                     <informalexample>
                        <screen><?db-font-size 75%?>+--------------------------------------+-------------+----------------+
| ID                                   | Label       | CIDR           |
+--------------------------------------+-------------+----------------+
| 00000000-0000-0000-0000-000000000000 | public      |                |
| 11111111-1111-1111-1111-111111111111 | private     |                |
| 1f84c238-b05a-4374-a0cb-aa6140032cd1 | new_network | 192.168.0.0/24 |
+--------------------------------------+-------------+----------------+</screen>
                     </informalexample>

                     <para>In the network list, ServiceNet is labeled as <literal>private</literal>, and PublicNet is labeled as
                        <literal>public</literal>.</para>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="create_server_with_network"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_list_networks">
        <?dbhtml stop-chunking?>
               <title>List Networks with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="list_networks_json">
                  <title>JSON Response</title>
                  <procedure>
                     <title>To list networks and request a JSON response</title>
                     <step>
                        <para>Issue the following cURL command: <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2 \
       -X GET -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>For each isolated network, the response returns the <glossterm>CIDR</glossterm>. Additionally, for
                        isolated networks and Rackspace networks, the response returns the network ID and label.
                        <programlisting language="json"><?db-font-size 75%?>
                            {
   "networks":[
      {
         "cidr":"192.168.0.0/24",
         "id":"1f84c238-b05a-4374-a0cb-aa6140032cd1",
         "label":"new_network"
      },
      {
         "id":"00000000-0000-0000-0000-000000000000",
         "label":"public"
      },
      {
         "id":"11111111-1111-1111-1111-111111111111",
         "label":"private"
      }
   ]
}</programlisting>
                        </para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="create_server_with_network"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="list_networks_xml">
                  <title>XML Response</title>
                  <procedure>
                     <title>To list networks and request an XML response</title>
                     <step>
                        <para>Issue the following cURL command:<programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2.xml \
        -H "Content-Type: application/xml" \
        -H "Accept: application/xml" \
        -X GET -H "X-Auth-Token: $token" </programlisting>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>For each isolated network, the response returns the <glossterm>CIDR</glossterm>. Additionally, for
                        isolated networks and Rackspace networks, the response returns the network ID and label.
                        <programlisting language="xml"><?db-font-size 75%?>
                            &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;networks&gt;
    &lt;network&gt;
        &lt;cidr&gt;172.16.0.0/24&lt;/cidr&gt;
        &lt;id&gt;e65accc0-1d98-45eb-af76-ab3d31edc7d2&lt;/id&gt;
        &lt;label&gt;new_network&lt;/label&gt;
    &lt;/network&gt;
    &lt;network&gt;
        &lt;id&gt;00000000-0000-0000-0000-000000000000&lt;/id&gt;
        &lt;label&gt;public&lt;/label&gt;
    &lt;/network&gt;
    &lt;network&gt;
        &lt;id&gt;11111111-1111-1111-1111-111111111111&lt;/id&gt;
        &lt;label&gt;private&lt;/label&gt;
    &lt;/network&gt;
&lt;/networks&gt;
</programlisting>
                        </para>
                        <para>ServiceNet is labeled as <literal>private</literal> and PublicNet is labeled as
                            <literal>public</literal> in the network list.</para>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="create_server_with_network"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section version="5.0"
                  xml:id="create_server_with_network"
                  xml:base="net_cfn_boot_server_both.xml">
            <title>Step 3. Provision a Server with an Isolated Network</title>
            <para>To create your new server and attach an isolated network, you need the following information: </para>

            <itemizedlist>
               <listitem>
                  <para>The name of the new server. Use a name of your choice.</para>
               </listitem>
               <listitem>
                  <para>The image ID. For how to list images, see
                <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/list_images.html">
                    List Images</link>.</para>
               </listitem>
               <listitem>
                  <para>The flavor ID. For how to list flavors, see
                <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/list_flavors.html">
                    List Flavors</link>.</para>
               </listitem>
               <listitem>
                  <para>The network ID of your isolated network. This is the ID you copied in <xref linkend="create_network"/>
                  </para>
               </listitem>
            </itemizedlist>

            <para>You specify these values as parameters in a nova command or as attributes in the request body in a cURL
        command.</para>
            <note security="external">
               <para>You cannot attach an isolated network to an existing server. However,
            to work around this limitation, you can create an image of the server and build a new server based on that image.
            When you build the new server, you can attach the isolated network. For information, see
            <link xlink:href="http://www.rackspace.com/knowledge_center/article/attach-an-existing-cloud-server-to-a-cloud-network">
                     <citetitle>Attach a Cloud Network to an Existing Cloud Server</citetitle>
                  </link>.
            To use the create image API, see
            <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/Create_Image-d1e4655.html">
                Create Image</link>.</para>
            </note>
            <note>
               <para>You can use the Cloud Networks virtual interface extension to attach an isolated network to an existing
            server. For information, see <xref linkend="ch_gs_attach_network_to_server"/>.</para>
            </note>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_provision_server"/>Provision a server with an isolated network with
                        the nova client</para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_provision_server"/>Provision a server with an isolated network with cURL</para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>

            <?hard-pagebreak?>
            <section xml:id="nova_provision_server">
               <title>Provision a Server with an Isolated Network with the nova Client</title>
               <para>
                  <procedure>
                     <title>To provision a server and attach an isolated network</title>
                     <step>
                        <para>Issue the following nova client command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 50%?>
                            $ nova boot &lt;name&gt; --flavor &lt;flavor&gt; --image &lt;image&gt; --nic [net-id=&lt;private-net-uuid&gt; [--no-public] [--no-service-net]</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional arguments:</emphasis>
                        </para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <parameter>name</parameter>. The name of the server.</para>
                           </listitem>
                        </itemizedlist>
                        <para>
                           <emphasis role="bold">Optional arguments:</emphasis>
                           <itemizedlist>
                              <listitem>
                                <para>
                                    <option>--no-service-net</option>. Optional. Opts out of attaching ServiceNet to your
                                    server.</para>
                                <note>
                                    <para>RackConnect and Managed Cloud Service Level customers will receive an error if they
                                        opt out of attaching ServiceNet to their server.</para>
                                </note>
                                <para>For example, to opt out of attaching ServiceNet to your server, issue the following
                                    command:
                                    <programlisting language="bash" role="gutter: false"><?db-font-size 55%?>
                                        $ nova boot &lt;name&gt; --flavor &lt;flavor&gt; --image &lt;image&gt; --nic net-id=&lt;private-net-uuid&gt; --no-service-net</programlisting>
                                 </para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--no-public</option>. Optional. Opts out of attaching PublicNet to your
                                    server.</para>
                                <note>
                                    <para>RackConnect and Managed Cloud Service Level customers will receive an error if they
                                        opt out of attaching PublicNet to their server.</para>
                                </note>
                                <para>For example, to opt out of attaching PublicNet to your server, issue the following
                                    command:
                                    <programlisting language="bash" role="gutter: false"><?db-font-size 55%?>
                                        $ nova boot &lt;name&gt; --flavor &lt;flavor&gt; --image &lt;image&gt; --nic net-id=&lt;private-net-uuid&gt; --no-public</programlisting>
                                 </para>
                              </listitem>
                              <?sbr?>
                              <listitem>
                                <para>
                                    <option>--disk-config</option> {<literal>auto</literal>|<literal>manual</literal>}.
                                    Specifies whether to expand the primary partition to fill the disk. This value overrides
                                    the value inherited from the image.</para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--flavor</option>
                                    <parameter>flavor</parameter>. Required. The flavor ID for the new server. To get a list
                                    of flavors, issue <command>nova flavor-list</command>.</para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--image</option>
                                    <parameter>image</parameter>. Required. The image ID for the new server. To get a list of
                                    images, issue <command>nova image-list</command>.</para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--meta</option>
                                    <parameter>key</parameter>
                                    <command>=</command>
                                    <parameter>value</parameter>. Arbitrary key
                                    and value metadata that is written to <filename>/meta.js</filename> on the new server.
                                    Can be specified multiple times. </para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--file</option>
                                    <parameter>dst-path</parameter>=<parameter>src-path</parameter>. Stores arbitrary files
                                    from <parameter>src-path</parameter> locally to <parameter>dst- path</parameter> on the
                                    new server. You can store up to five files. </para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--key_name</option>
                                    <parameter>key_name</parameter>. Key name of key pair. First, create the key pair with
                                    the <command>keypair-add</command> command.</para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--user_data</option>
                                    <parameter>user-data</parameter>. User data file, which is exposed by the metadata
                                    server. </para>
                              </listitem>
                              <?sbr?>
                              <listitem>
                                <para>
                                    <option>--nic net-id=</option>
                                    <parameter>private-net-id</parameter>&gt;. Creates a NIC on
                                    the server. Specify this option multiple times to create multiple NICs. Optionally, to
                                    attach a NIC with a specified UUID to a network, specify the
                                        <option>net-id</option>=<parameter>private-net-id</parameter> parameter. </para>
                                <!--removed per Sameer as v4-fixed-ip is not supported (on 9/17/2013)-->
                                <!--<para>Optionally, specify the <option>v4-fixed-ip=</option><parameter>ip-addr</parameter>
                                    parameter to specify an IPv4 fixed address for NIC. </para>-->
                                <para>If you do not specify any networks on the <option>--nic</option> parameter, PublicNet
                                    and ServiceNet are attached to your server. </para>
                                <note>
                                    <para>ServiceNet is labeled as <literal>private</literal> and PublicNet is labeled as
                                            <literal>public</literal> in the network list.</para>
                                </note>
                                <para>If you specify additional networks through the <option>—nic</option> parameter, these
                                    networks, in addition to PublicNet and ServiceNet, are attached to your server.</para>
                                <para>You can specify the optional <option>--no-public</option> and
                                        <option>--no-service-net</option> parameters to opt out of attaching PublicNet and
                                    ServiceNet to your server.</para>
                                <para>Specify the <option>--no-public</option> parameter to opt out of attaching PublicNet to
                                    your server.</para>
                                <para>Specify the <option>--no-service-net</option> parameter to opt out of attaching
                                    ServiceNet to your server.</para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--config-drive</option>
                                    <parameter>value</parameter>. Enables a configuration drive. </para>
                              </listitem>
                              <listitem>
                                <para>
                                    <option>--poll</option>. Blocks while the instance builds so progress can be reported.
                                </para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>For example, you might issue the following command to attach a NIC to your server. Additionally,
                        PublicNet and ServiceNet are attached to your
                        server.<programlisting language="bash" role="gutter: false">
                            $ nova boot my_server_with_network --flavor 2 --image d42f821e-c2d1-4796-9f07-af5ed7912d0e --nic net-id=e65accc0-1d98-45eb-af76-ab3d31edc7d2</programlisting>
                        </para>
                        <?sbr?>
                        <para>
                           <emphasis role="bold">Output:</emphasis> The command returns information about the new server, as
                        shown in the following output:</para>
                        <informalexample>
                           <screen>+-------------------------+--------------------------------------+
| Property                | Value                                |
+-------------------------+--------------------------------------+
| OS-DCF:diskConfig       | AUTO                                 |
| OS-EXT-STS:power_state  | 0                                    |
| OS-EXT-STS:task_state   | scheduling                           |
| OS-EXT-STS:vm_state     | building                             |
| accessIPv4              |                                      |
| accessIPv6              |                                      |
| adminPass               | abababababab                         |
| created                 | 2012-10-04T18:07:56Z                 |
| flavor                  | 512MB Standard Instance              |
| hostId                  |                                      |
| id                      | 72859427-1e74-4a4f-b6b5-f547c1c3d452 |
| image                   | Fedora 17 (Beefy Miracle)            |
| metadata                | {}                                   |
| name                    | my_server_with_network               |
| progress                | 0                                    |
| status                  | BUILD                                |
| tenant_id               | 010101                               |
| updated                 | 2012-10-04T18:07:56Z                 |
| user_id                 | 170454                               |
+-------------------------+--------------------------------------+</screen>
                        </informalexample>

                     </step>
                  </procedure>
               </para>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="list_servers"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_provision_server">
               <title>Provision a Server with an Isolated Network with cURL</title>
               <section xml:id="json_create_server">
                  <title>JSON Request and Response</title>
                  <procedure>
                     <title>To provision a server with an isolated network to the server</title>
                     <step>
                        <para>Issue the following cURL
                        command:<programlisting language="bash" role="gutter: false"><?db-font-size 55%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers \
         -X POST \
         -H "X-Auth-Project-Id: $account" \
         -H "Content-Type: application/json" \
         -H "Accept: application/json" \
         -H "X-Auth-Token: $token" \
         -d '{"server": {"name": "my_server_with_network", "imageRef": "d42f821e-c2d1-4796-9f07-af5ed7912d0e", "flavorRef": "2", "max_count": 1, "min_count": 1, "networks": [{"uuid": "538a112a-34d1-47ff-bf1e-c40639e886e2"}, {"uuid": "00000000-0000-0000-0000-000000000000"}, {"uuid": "11111111-1111-1111-1111-111111111111"}]}}' \
         | python -m json.tool</programlisting>
                        </para>
                        <para>In addition to the isolated network, PublicNet and ServiceNet are attached to the server. You must
                        explicitly specify these networks to attach them to your server.</para>
                        <para>
                           <emphasis role="bold">Output:</emphasis> The API operation returns information about the new
                        server, as shown in the following output:</para>
                        <programlisting language="json"><?db-font-size 65%?>
                        {
    "server": {
        "OS-DCF:diskConfig": "AUTO", 
        "adminPass": "LMoheHauXt8w", 
        "id": "ef08aa7a-b5e4-4bb8-86df-5ac56230f841", 
        "links": [
            {
                "href": "https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/ef08aa7a-b5e4-4bb8-86df-5ac56230f841", 
                "rel": "self"
            }, 
            {
                "href": "https://dfw.servers.api.rackspacecloud.com/010101/servers/ef08aa7a-b5e4-4bb8-86df-5ac56230f841", 
                "rel": "bookmark"
            }
        ]
    }
}
</programlisting>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_servers"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="xml_create_server">
                  <title>XML Request and Response</title>
                  <procedure>
                     <title>To provision a server and attach an isolated network to the server</title>
                     <step>
                        <para>Issue the following cURL
                        command:<programlisting language="bash" role="gutter: false"><?db-font-size 55%?>
                            $ curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers.xml \
        -X POST \
        -H "X-Auth-Project-Id: $account" \
        -H "Content-Type: application/xml" \
        -H "Accept: application/xml" \
        -H "X-Auth-Token: $token" \
        -d '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;server xmlns="http://docs.openstack.org/compute/api/v1.1" imageRef="3afe97b2-26dc-49c5-a2cc-a2fc8d80c001" flavorRef="2" name="api-test-server-xml2"&gt;&lt;metadata&gt;&lt;meta key="My Server Name"&gt;API Test Server XML&lt;/meta&gt;&lt;/metadata&gt;&lt;networks&gt;&lt;uuid&gt;0ef47ac7-6797-4e01-8a47-ed26ec3aaa56&lt;/uuid&gt;&lt;uuid&gt;00000000-0000-0000-0000-000000000000&lt;/uuid&gt;&lt;uuid&gt;11111111-1111-1111-1111-111111111111&lt;/uuid&gt;&lt;/networks&gt;&lt;/server&gt;'</programlisting>
                        </para>
                        <para>In addition to the isolated network, PublicNet and ServiceNet are attached to the server. You must
                        explicitly specify these networks to attach them to your server.</para>
                        <para>
                           <emphasis role="bold">Output:</emphasis> The API operation returns information about the new
                        server, as shown in the following output:</para>
                        <programlisting language="xml"><?db-font-size 65%?>&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;server
    xmlns:OS-DCF="http://docs.openstack.org/compute/ext/disk_config/api/v1.1"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns="http://docs.openstack.org/compute/api/v1.1"
    id="ed5c7754-29b6-45fa-96cb-ab64958c8c0a" adminPass="Dd5pNZtpVVQ3"
    OS-DCF:diskConfig="AUTO"&gt;
    &lt;metadata/&gt;
    &lt;atom:link
        href="https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/ed5c7754-29b6-45fa-96cb-ab64958c8c0a"
        rel="self"/&gt;
    &lt;atom:link
        href="https://dfw.servers.api.rackspacecloud.com/010101/servers/ed5c7754-29b6-45fa-96cb-ab64958c8c0a"
        rel="bookmark"/&gt;
&lt;/server&gt;
</programlisting>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_servers"/>
                     </para>
                  </sidebar>
               </section>
            </section>
            <?hard-pagebreak?>

         </section>
         <section version="5.0"
                  xml:id="list_servers"
                  xml:base="net_cfn_list_servers_both.xml">
            <title>Step 4. List Servers and Attached Networks</title>
            <para>To show all the servers in your Cloud account, you can list servers. When you list servers, the addresses for any
        attached networks are displayed. The networks include any isolated networks that you have created and Rackspace
        public and private networks.</para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_list_servers"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_list_servers"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <?hard-pagebreak?>
            <section xml:id="nova_list_servers">
               <title>List Servers with the nova Client</title>
               <procedure>
                  <title>To list servers with the nova client:</title>
                  <step>
                     <para>Issue the following command:</para>
                     <programlisting language="bash" role="gutter: false">$ nova list</programlisting>
                     <para>For each server, the command returns the server ID, name, status, and addresses for any attached
                    networks, as shown in the following output:</para>

                     <programlisting language="bash" role="gutter: false"><?db-font-size 40%?>+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+
| ID                                   | Name           | Status | Networks                                                                              |
+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+
| 9da98125-0de8-4b84-880c-b42977c32773 | myUbuntuServer | ACTIVE | public=2001:4800:780d:0509:d87b:9cbc:ff04:488b, 198.101.231.59; private=10.179.224.74 |
| a09e7493-7429-41e1-8d3f-384d7ece09c0 | UbuntuDevStack | ACTIVE | public=2001:4800:780e:0510:d87b:9cbc:ff04:3e81, 50.56.186.185; private=10.180.13.75   |
+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+</programlisting>
                     <para>The networks include any isolated networks that you have created and Rackspace public and private
                    networks.</para>
                  </step>
                  <step>
                     <para>Look for your server in the list of servers. Servers are listed by server ID. </para>
                     <para>Copy the server ID for your server. To update or delete your server, you need this ID.</para>
                     <para>You use the public IP address when you log into your server.</para>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="show_network"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_list_servers">
               <title>List Servers with cURL</title>
               <procedure>
                  <title>To list servers with cURL:</title>
                  <step>
                     <para>Issue the following command:</para>
                     <programlisting language="bash" role="gutter: false"><?db-font-size 60%?>
                    $ curl -s https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/detail \
       -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                     <para>For each server, the command returns the disk configuration, the addresses of any attached networks,
                    flavor and image information, the server ID, and the server status. The networks include any isolated
                    networks that you have created and Rackspace public and private networks.</para>
                     <para>The following output shows the list servers information, including information for the Ubuntu server
                    that you just created:</para>
                     <programlisting language="json"><?db-font-size 60%?>{
    "servers": [
        {
            "OS-DCF:diskConfig": "AUTO", 
            "OS-EXT-STS:power_state": 0, 
            "OS-EXT-STS:task_state": "spawning", 
            "OS-EXT-STS:vm_state": "building", 
            "accessIPv4": "", 
            "accessIPv6": "", 
            "addresses": {
                "private": [
                    {
                        "addr": "10.180.16.21", 
                        "version": 4
                    }
                ], 
                "public": [
                    {
                        "addr": "2001:4800:780e:0510:d87b:9cbc:ff04:4bac", 
                        "version": 6
                    }, 
                    {
                        "addr": "198.101.242.47", 
                        "version": 4
                    }
                ]
            }, 
            "created": "2012-08-16T17:11:43Z", 
            "flavor": {
                "id": "6", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/flavors/6", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "hostId": "692f611d2d84e5368b5995d7733ca5f175dc670eda91eded50a47eab", 
            "id": "1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
            "image": {
                "id": "3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/images/3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
                    "rel": "self"
                }, 
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/010101/servers/1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
                    "rel": "bookmark"
                }
            ], 
            "metadata": {
                "My Server Name": "Ubuntu 11.10 server"
            }, 
            "name": "myUbuntuServer", 
            "progress": 75,  
            "status": "BUILD", 
            "tenant_id": "010101", 
            "updated": "2012-08-16T17:14:50Z", 
            "user_id": "170454"
        }, 
        {
            "OS-DCF:diskConfig": "AUTO", 
            "OS-EXT-STS:power_state": 1, 
            "OS-EXT-STS:task_state": null, 
            "OS-EXT-STS:vm_state": "active", 
            "accessIPv4": "", 
            "accessIPv6": "", 
            "addresses": {
                "private": [
                    {
                        "addr": "10.180.13.75", 
                        "version": 4
                    }
                ], 
                "public": [
                    {
                        "addr": "2001:4800:780e:0510:d87b:9cbc:ff04:3e81", 
                        "version": 6
                    }, 
                    {
                        "addr": "50.56.186.185", 
                        "version": 4
                    }
                ]
            }, 
            "created": "2012-05-15T15:47:37Z", 
            "flavor": {
                "id": "6", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/flavors/6", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "hostId": "1d65b563fc573c2eb544319e0af598f2b2c5f84f75de252db3757cd3", 
            "id": "a09e7493-7429-41e1-8d3f-384d7ece09c0", 
            "image": {
                "id": "3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/images/3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/a09e7493-7429-41e1-8d3f-384d7ece09c0", 
                    "rel": "self"
                }, 
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/010101/servers/a09e7493-7429-41e1-8d3f-384d7ece09c0", 
                    "rel": "bookmark"
                }
            ], 
            "metadata": {}, 
            "name": "UbuntuDevStack", 
            "progress": 100, 
            "status": "ACTIVE", 
            "tenant_id": "010101", 
            "updated": "2012-05-15T15:55:00Z", 
            "user_id": "170454"
        }
    ]
}</programlisting>
                  </step>
                  <step>
                     <para>Look for your server in the list of servers. Servers are listed by server ID. </para>
                     <para>Copy the server ID for your server. To update or delete your server, you need this ID.</para>
                     <para>You use the public IP address when you log into your server.</para>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="show_network"/>
                  </para>
               </sidebar>
            </section>
         </section>
         <section version="5.0"
                  xml:id="show_network"
                  xml:base="net_cfn_show_network_nova.xml">
            <title>Step 5. Show Network Information</title>
            <para>You can show details for a specified network ID.</para>
            <para>The response body returns the following fields: <table rules="all" width="100%">
                  <caption>Show Network Response Fields</caption>
                  <col width="20%"/>
                  <col width="80%"/>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>cidr</td>
                        <td>The <glossterm>CIDR</glossterm> for an isolated private network.</td>
                     </tr>
                     <tr>
                        <td>id</td>
                        <td>The network ID.</td>
                     </tr>
                     <tr>
                        <td>
                           <para>label</para>
                        </td>
                        <td>The name of the network. </td>
                     </tr>
                  </tbody>
               </table>
            </para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_show_network"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_show_network"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <?hard-pagebreak?>
            <section xml:id="nova_show_network">
               <title>Show Network Information with the nova Client</title>
               <procedure>
                  <title>To show information for a specified network ID</title>
                  <step>
                     <para>Issue the following nova client command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ nova network &lt;id&gt;</programlisting>
                     </para>
                     <para>
                        <emphasis role="bold">Positional argument:</emphasis>
                     </para>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <parameter>id</parameter>. The ID of the network for which you want to show information. To
                                determine the network ID, issue a <command>nova</command>
                                <option>network-list</option> command. </para>
                           </listitem>
                        </itemizedlist>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                     <para>The command returns the <glossterm>CIDR</glossterm>, network ID, and label, as shown in the following
                    output:</para>
                     <informalexample>
                        <screen>+----------+--------------------------------------+
| Property | Value                                |
+----------+--------------------------------------+
| cidr     | 172.16.0.0/24                        |
| id       | e65accc0-1d98-45eb-af76-ab3d31edc7d2 |
| label    | new_network                          |
+----------+--------------------------------------+</screen>
                     </informalexample>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="delete_network"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_show_network">
               <title>Show Network with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="json_show_network_curl">
                  <title>JSON Response</title>
                  <procedure>
                     <title>To show information in a JSON response for a specified network ID</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2/&lt;id&gt; \
        -X GET \
        -H "X-Auth-Project-Id: $account" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json"\
        -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional argument:</emphasis>
                        </para>
                        <para>
                           <itemizedlist>
                              <listitem>
                                <para>
                                    <parameter>id</parameter>. The ID of the network for which you want to show
                                    information. To determine the network ID, issue a <command>nova</command>
                                    <option>network-list</option> command. </para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The API operation returns the <glossterm>CIDR</glossterm>, network ID, and label, as shown in the
                        following output:</para>

                        <programlisting language="json"><?db-font-size 75%?>
                        {
    "network": {
        "cidr": "192.168.0.0/24", 
        "id": "f212726e-6321-4210-9bae-a13f5a33f83f", 
        "label": "superprivate_xml"
    }
}</programlisting>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="delete_network"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="xml_show_network_curl">
                  <title>XML Response</title>
                  <procedure>
                     <title>To show information in an XML response for a specified network ID</title>
                     <step>
                        <para>Issue the following cURL command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2/&lt;id&gt;.xml \
        -X GET \
        -H "X-Auth-Project-Id: $account" \
        -H "Accept: application/xml" \
        -H "Content-Type: application/xml"\
        -H "X-Auth-Token: $token"</programlisting>
                        </para>
                        <para>
                           <emphasis role="bold">Positional argument:</emphasis>
                        </para>
                        <para>
                           <itemizedlist>
                              <listitem>
                                <para>
                                    <parameter>id</parameter>. The ID of the network for which you want to show
                                    information. To determine the network ID, issue a <command>nova</command>
                                    <option>network-list</option> command. </para>
                              </listitem>
                           </itemizedlist>
                        </para>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>The API operation returns the <glossterm>CIDR</glossterm>, network ID, and label, as shown in the
                        following output:</para>

                        <programlisting language="xml"><?db-font-size 75%?>
                        &lt;network&gt;
    &lt;cidr&gt;192.168.0.0/24&lt;/cidr&gt;
    &lt;id&gt;f212726e-6321-4210-9bae-a13f5a33f83f&lt;/id&gt;
    &lt;label&gt;superprivate_xml&lt;/label&gt;
&lt;/network&gt;
</programlisting>
                     </step>
                  </procedure>
                  <sidebar>
                     <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="delete_network"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section version="5.0"
                  xml:id="delete_network"
                  xml:base="net_cfn_delete_network_nova.xml">
            <title>Step 6. Delete Your Network</title>
            <para>If you no longer need your network, you can delete it. </para>
            <para>You cannot delete an isolated network unless the network is not attached to any server.</para>
            <para>To detach a network from a server, you must delete the virtual interface for the network from the server. Then, you
        can delete the network.</para>

            <para>After the network is deleted, it no longer appears in the list of networks.</para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                     <listitem>
                        <para>
                           <xref linkend="nova_delete_network"/>
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           <xref linkend="curl_delete_network"/>
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <section xml:id="nova_delete_network">
               <title>Delete Network with the nova Client</title>
               <procedure>
                  <title>To delete a specified network</title>
                  <step>
                     <title>Delete the virtual interface for the network from the server</title>
                     <para>To detach a network from a server, first delete the virtual interface for the network from the server.
                </para>
                  </step>
                  <step>
                     <title>Delete the network</title>
                     <para>Issue the following nova client command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ nova network-delete &lt;id&gt;</programlisting>
                     </para>
                     <para>
                        <emphasis role="bold">Positional argument:</emphasis>
                     </para>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <parameter>id</parameter>. The network ID of the network that you want to delete. To
                                determine the network ID, issue a <command>nova</command>
                                <option>network-list</option> command.</para>
                           </listitem>
                        </itemizedlist>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis> None.</para>
                  </step>
               </procedure>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_delete_network">
               <title>Delete Network with cURL</title>
               <procedure>
                  <title>To delete a specified network</title>
                  <step>
                     <title>Delete the virtual interface for the network from the server</title>
                     <para>To detach a network from a server, first delete the virtual interface for the network from the server.
                </para>
                  </step>
                  <step>
                     <title>Delete the network</title>
                     <para>Issue the following cURL command:
                    <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>
                        $ curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2/&lt;id&gt; \
       -X 'DELETE' \
       -H "X-Auth-Token: $token" \
       -H "X-Auth-Project-Id: $account" \
       -H "Accept: application/json" </programlisting>
                     </para>
                     <note>
                        <para>Include the <option>-i</option> option in the cURL command to show the response header. Omit the
                            <code>| python -m json.tool</code> clause from the command because the API operation does not
                        return a JSON response.</para>
                     </note>
                     <para>
                        <emphasis role="bold">Argument:</emphasis>
                     </para>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>
                                 <parameter>id</parameter>. The network ID of the network that you want to delete. To
                                determine the network ID, issue a <command>nova</command>
                                <option>network-list</option> command.</para>
                           </listitem>
                        </itemizedlist>
                     </para>
                     <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                     <para>Successful deletion returns an <errortext>Accepted</errortext> (<returnvalue>202</returnvalue>)
                    response code:</para>
                     <screen>HTTP/1.1 202 Accepted
Date: Thu, 04 Oct 2012 16:23:30 GMT
Content-Length: 58
Content-Type: text/html;charset=UTF-8
Server: Jetty(8.0.y.z-SNAPSHOT)

202 Accepted

The request is accepted for processing.</screen>
                  </step>
               </procedure>
            </section>

         </section>
      </section>
   </chapter>
    <chapter version="5.0"
            xml:id="ch_gs_attach_network_to_server"
            xml:base="chapters/net_attach_network_to_server.xml">
      <title>Attach Your Network to an Existing Server</title>
      <para>Before attaching your first network to a server, choose whether to use the Neutron API or the Nova-network API. For
        help deciding, see <xref linkend="section_nova_v_neutron"/>. The sections in this chapter provide examples of attaching a network to an existing
        server using each API.</para>
      <section xmlns:raxm="http://docs.rackspace.com/api/metadata"
               version="5.0"
               xml:id="attach_network_to_server_neutron"
               xml:base="chapters/net_attach_network_neutron.xml">
         <title>Attach Your Network to an Existing Server Using Neutron</title>
         <para>How do we do this with Neutron? </para>
      </section>
      <section xmlns:raxm="http://docs.rackspace.com/api/metadata"
               version="5.0"
               xml:id="attach_network_to_server_nova"
               xml:base="chapters/net_attach_network_nova.xml">
         <title>Attach Your Network to an Existing Server Using Nova-network</title>
         <para>Use the Cloud Networks virtual interface extension to create a virtual interface to a specified network and attach the network to an existing
        server instance with the Nova-network API. </para>
         <para>You can create a maximum of one virtual interface per instance per network. </para>
         <para>You can also use the Cloud Networks virtual interface extension to:</para>
         <itemizedlist>
            <listitem>
               <para>List the virtual interfaces for a server instance.</para>
            </listitem>
            <listitem>
               <para>Delete a virtual interface and detach it from a server instance.</para>
            </listitem>
         </itemizedlist>
         <para>These examples walk you through the steps to create a virtual interface to a specified network and attach the
        network to an existing server instance. The simple exercises show you how to access the Cloud Networks virtual interface extension through nova
        client commands or cURL commands.</para>
         <para>The exercises also help you learn how cURL commands and the Cloud Networks API work. </para>

         <section version="5.0" xml:id="section_gs_install_vir_interface">
            <title>Step 1. Install the Cloud Networks Virtual Interface Extension</title>
            <procedure>
               <title>To install the Cloud Networks virtual interface extension</title>
               <step>
                  <title>Install the Cloud Networks virtual interface extension</title>
                  <para>The <literal>os_virtual_interfacesv2_python_novaclient_ext</literal> package contains the Cloud Networks virtual interface extension. </para>
                  <para>Run the following command to install the package:</para>
                  <programlisting language="bash" role="gutter: false">
                    $ sudo pip install os_virtual_interfacesv2_python_novaclient_ext</programlisting>
                  <note>
                    <para>If you previously installed this package, run the following command to upgrade it:
                        <programlisting language="bash" role="gutter: false">
                            $ sudo pip install os_virtual_interfacesv2_python_novaclient_ext --upgrade</programlisting>
                     </para>
                  </note>
               </step>
               <?sbr?>
               <step>
                  <title>Test the Cloud Networks virtual interface extension</title>
                  <para>To verify that you can talk to the API server, run the following commands.</para>
                  <para>First, authenticate:
                    <programlisting language="bash" role="gutter:false">
                        $ nova credentials </programlisting>
                  </para>
                  <para condition="cn">Then, list networks:
                    <programlisting language="bash" role="gutter: false">
                        $ nova network-list </programlisting>Then,
                    list virtual interfaces:
                    <programlisting language="bash" role="gutter: false">
                        $ nova virtual-interface-list <replaceable>instance_id</replaceable>
                     </programlisting>
                  </para>
                  <para>Where <parameter>instance_id</parameter> is the ID of your server instance.</para>
               </step>
            </procedure>
         </section>
         <section xml:id="list_servers2">
            <title>Step 2. List Servers</title>
            <para>To get the ID of the server instance to which you want to attach a virtual interface, list the servers in your
            Cloud account. </para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para>
                           <xref linkend="nova_list_servers2"/>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                           <xref linkend="curl_list_servers2"/>
                        </para>
                    </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <?hard-pagebreak?>
            <section xml:id="nova_list_servers2">
               <title>List Servers with the nova Client</title>
               <procedure>
                  <title>To list servers with the nova client:</title>
                  <step>
                    <para>Issue the following command:</para>
                    <programlisting language="bash" role="gutter: false">
                        $ nova list</programlisting>
                    <para>For each server, the command returns the server ID, name, status, and public and private IP
                        addresses, as shown in the following output:</para>
                    <informalexample>
                        <screen><?db-font-size 40%?>+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+
| ID                                   | Name           | Status | Networks                                                                              |
+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+
| 9da98125-0de8-4b84-880c-b42977c32773 | myUbuntuServer | ACTIVE | public=2001:4800:780d:0509:d87b:9cbc:ff04:488b, 198.101.231.59; private=10.179.224.74 |
| a09e7493-7429-41e1-8d3f-384d7ece09c0 | UbuntuDevStack | ACTIVE | public=2001:4800:780e:0510:d87b:9cbc:ff04:3e81, 50.56.186.185; private=10.180.13.75   |
+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+</screen>
                    </informalexample>
                  </step>
                  <step>
                    <para>Copy the ID for the server to which you want to connect a virtual interface. </para>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                    <xref linkend="list_networks2"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_list_servers2">
               <title>List Servers with cURL</title>
               <procedure>
                  <title>To list servers with cURL:</title>
                  <step>
                    <para>Issue the following command:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 60%?>
                        $ curl -s https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/detail \
     -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                    <para>For each server, the command returns the disk configuration, private and public IP addresses,
                        flavor and image information, the server ID, and the server status. </para>
                    <para>The following output shows the list servers information:</para>
                    <programlisting language="json"><?db-font-size 60%?>{
    "servers": [
        {
            "OS-DCF:diskConfig": "AUTO", 
            "OS-EXT-STS:power_state": 0, 
            "OS-EXT-STS:task_state": "spawning", 
            "OS-EXT-STS:vm_state": "building", 
            "accessIPv4": "", 
            "accessIPv6": "", 
            "addresses": {
                "private": [
                    {
                        "addr": "10.180.16.21", 
                        "version": 4
                    }
                ], 
                "public": [
                    {
                        "addr": "2001:4800:780e:0510:d87b:9cbc:ff04:4bac", 
                        "version": 6
                    }, 
                    {
                        "addr": "198.101.242.47", 
                        "version": 4
                    }
                ]
            }, 
            "created": "2012-08-16T17:11:43Z", 
            "flavor": {
                "id": "6", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/flavors/6", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "hostId": "692f611d2d84e5368b5995d7733ca5f175dc670eda91eded50a47eab", 
            "id": "1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
            "image": {
                "id": "3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/images/3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
                    "rel": "self"
                }, 
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/010101/servers/1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
                    "rel": "bookmark"
                }
            ], 
            "metadata": {
                "My Server Name": "Ubuntu 11.10 server"
            }, 
            "name": "myUbuntuServer", 
            "progress": 75, 
            "status": "BUILD", 
            "tenant_id": "010101", 
            "updated": "2012-08-16T17:14:50Z", 
            "user_id": "170454"
        }, 
        {
            "OS-DCF:diskConfig": "AUTO", 
            "OS-EXT-STS:power_state": 1, 
            "OS-EXT-STS:task_state": null, 
            "OS-EXT-STS:vm_state": "active", 
            "accessIPv4": "", 
            "accessIPv6": "", 
            "addresses": {
                "private": [
                    {
                        "addr": "10.180.13.75", 
                        "version": 4
                    }
                ], 
                "public": [
                    {
                        "addr": "2001:4800:780e:0510:d87b:9cbc:ff04:3e81", 
                        "version": 6
                    }, 
                    {
                        "addr": "50.56.186.185", 
                        "version": 4
                    }
                ]
            }, 
            "created": "2012-05-15T15:47:37Z", 
            "flavor": {
                "id": "6", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/flavors/6", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "hostId": "1d65b563fc573c2eb544319e0af598f2b2c5f84f75de252db3757cd3", 
            "id": "a09e7493-7429-41e1-8d3f-384d7ece09c0", 
            "image": {
                "id": "3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/images/3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/a09e7493-7429-41e1-8d3f-384d7ece09c0", 
                    "rel": "self"
                }, 
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/010101/servers/a09e7493-7429-41e1-8d3f-384d7ece09c0", 
                    "rel": "bookmark"
                }
            ], 
            "metadata": {}, 
            "name": "UbuntuDevStack", 
            "progress": 100, 
            "status": "ACTIVE", 
            "tenant_id": "010101", 
            "updated": "2012-05-15T15:55:00Z", 
            "user_id": "170454"
        }
    ]
}</programlisting>
                  </step>
                  <step>
                    <para>Copy the ID for the server to which you want to connect a virtual interface. </para>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                    <xref linkend="list_networks2"/>
                  </para>
               </sidebar>
            </section>

         </section>
         <section xml:id="list_networks2">
            <title>Step 3. List Networks</title>
            <para>To get the ID of the network for which you want to create virtual interface, list the networks in your Cloud
            account. </para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para>
                           <xref linkend="nova_list_networks2"/>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                           <xref linkend="curl_list_networks2"/>
                        </para>
                    </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <section xml:id="nova_list_networks2">
               <title>List Networks with the nova Client</title>
               <procedure>
                  <title>To list networks with the nova client</title>
                  <step>
                    <para>Issue the following nova client command:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ nova network-list </programlisting>
                    <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                    <para>For each network, the command returns the network ID, label, and <glossterm>CIDR</glossterm>, as
                        shown in the following output:</para>
                    <informalexample>
                        <screen><?db-font-size 75%?>+--------------------------------------+-------------+----------------+
| ID                                   | Label       | CIDR           |
+--------------------------------------+-------------+----------------+
| 00000000-0000-0000-0000-000000000000 | public      |                |
| 11111111-1111-1111-1111-111111111111 | private     |                |
| 1f84c238-b05a-4374-a0cb-aa6140032cd1 | new_network | 192.168.0.0/24 |
+--------------------------------------+-------------+----------------+</screen>
                    </informalexample>
                    <para>In the network list, ServiceNet is labeled as <literal>private</literal>, and PublicNet is labeled
                        as <literal>public</literal>.</para>
                  </step>
                  <step>
                    <para>Copy the ID for the network for which you want to create a virtual interface. </para>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                    <xref linkend="create_virt_interface"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_list_networks2">
               <title>List Networks with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="list_networks2_json">
                  <title>JSON Request and Response</title>
                  <procedure>
                    <title>To list networks and request a JSON response</title>
                    <step>
                        <para>Issue the following cURL command: <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2 \
       -X GET \
       -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                            <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>For each isolated network, the response returns the <glossterm>CIDR</glossterm>. Additionally,
                            for isolated networks and Rackspace networks, the response returns the network ID and label.
                            <programlisting language="json"><?db-font-size 75%?>
                                {
   "networks":[
      {
         "cidr":"192.168.0.0/24",
         "id":"1f84c238-b05a-4374-a0cb-aa6140032cd1",
         "label":"new_network"
      },
      {
         "id":"00000000-0000-0000-0000-000000000000",
         "label":"public"
      },
      {
         "id":"11111111-1111-1111-1111-111111111111",
         "label":"private"
      }
   ]
}</programlisting>
                        </para>
                    </step>
                    <step>
                        <para>Copy the ID for the network for which you want to create a virtual interface. </para>
                    </step>
                  </procedure>
                  <sidebar>
                    <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="create_virt_interface"/>
                     </para>
                  </sidebar>
               </section>
               <section xml:id="list_networks2_xml">
                  <title>XML Request and Response</title>
                  <procedure>
                    <title>To list networks and request an XML response</title>
                    <step>
                        <para>Issue the following cURL command:<programlisting language="bash" role="gutter: false"><?db-font-size 75%?>curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2.xml \
        -H "Content-Type: application/xml" \
        -H "Accept: application/xml" \
        -X GET -H "X-Auth-Token: $token" </programlisting>
                            <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>For each isolated network, the response returns the <glossterm>CIDR</glossterm>. Additionally,
                            for isolated networks and Rackspace networks, the response returns the network ID and label.
                            <programlisting language="xml"><?db-font-size 75%?>
                                &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;networks&gt;
    &lt;network&gt;
        &lt;cidr&gt;172.16.0.0/24&lt;/cidr&gt;
        &lt;id&gt;e65accc0-1d98-45eb-af76-ab3d31edc7d2&lt;/id&gt;
        &lt;label&gt;new_network&lt;/label&gt;
    &lt;/network&gt;
    &lt;network&gt;
        &lt;id&gt;00000000-0000-0000-0000-000000000000&lt;/id&gt;
        &lt;label&gt;public&lt;/label&gt;
    &lt;/network&gt;
    &lt;network&gt;
        &lt;id&gt;11111111-1111-1111-1111-111111111111&lt;/id&gt;
        &lt;label&gt;private&lt;/label&gt;
    &lt;/network&gt;
&lt;/networks&gt;
 </programlisting>
                        </para>
                        <para>ServiceNet is labeled as <literal>private</literal> and PublicNet is labeled as
                                <literal>public</literal> in the network list.</para>
                    </step>
                    <step>
                        <para>Copy the ID for the network for which you want to create a virtual interface. </para>
                    </step>
                  </procedure>
                  <sidebar>
                    <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="create_virt_interface"/>
                     </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section xml:id="create_virt_interface">
            <title>Step 4. Create a Virtual Interface</title>
            <para>When you create a virtual interface, you specify the following information:<itemizedlist>
                  <listitem>
                    <para>
                        <emphasis role="bold">Network ID</emphasis>. The ID of the network for which you want to create a
                        virtual interface.</para>
                  </listitem>
                  <listitem>
                    <para>
                        <emphasis role="bold">Server ID</emphasis>. The ID of the server instance to which you want to
                        connect the virtual interface. </para>
                  </listitem>
               </itemizedlist>
            </para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para>
                           <xref linkend="nova_create_virt_interface"/>Create a virtual interface with the nova client</para>
                    </listitem>
                    <listitem>
                        <para>
                           <xref linkend="curl_create_virt_interfaces_for_server"/>Create a virtual interface with cURL</para>
                    </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <section xml:id="nova_create_virt_interface">
               <title>Create a Virtual Interface with the nova Client</title>
               <procedure>
                  <title>To create a virtual interface with the nova client</title>
                  <step>
                    <para>Issue the following nova client command:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ nova virtual-interface-create <replaceable>network_id</replaceable> 
                        <replaceable>instance_id</replaceable>
                     </programlisting>
                    <para>
                        <emphasis role="bold">Positional arguments:</emphasis>
                     </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                              <parameter>network_id</parameter>. The ID of the network for which you want to create a
                                virtual interface. You copied this ID in <xref linkend="list_networks2"/>.</para>
                        </listitem>
                        <listitem>
                            <para>
                              <parameter>instance_id</parameter>. The ID of the server instance to which you want to
                                connect the virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                    </itemizedlist>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="list_virt_interfaces_for_server"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_create_virt_interfaces_for_server">
               <title>Create Virtual Interface with cURL</title>
               <para>You can issue a JSON or XML request in a cURL command.</para>
               <section xml:id="curl_create_virt_interface_json">
                  <title>JSON Request and Response</title>
                  <procedure>
                    <title>To create a virtual interface and request a JSON response</title>
                    <step>
                        <para>To create a virtual interface, you must specify the server ID in the request URI, and include a
                            request body that specifies the network ID for which you want to create a virtual interface. </para>
                        <para>For example, issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2 \
     -X POST \
     -H "Content-Type: application/json" \
     -H "Accept: application/json" \
     -H "X-Auth-Token: $token" \
     -d '{"virtual_interface": {"network_id": "<replaceable>network_id</replaceable>"}}'| python -m json.tool</programlisting>
                        <para>
                           <emphasis role="bold">Arguments:</emphasis>
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                 <parameter>instance_id</parameter>. The ID of the server instance to which you want to
                                    connect the virtual interface. You copied this ID in <xref linkend="list_networks2"/>.</para>
                            </listitem>
                            <listitem>
                                <para>
                                 <parameter>network_id</parameter>. The ID of the network for which you want to create a
                                    virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <programlisting language="json"><?db-font-size 65%?>
                            {
   "virtual_interfaces":[
      {
         "mac_address":"FE:ED:FA:00:08:93",
         "id":"045f195f-3347-487b-8e80-8ee3390eda56",
         "ip_addresses":[
            {
               "address":"192.168.0.1",
               "network_id":"196a0246-86cc-46fa-9ecf-850f67c2cb7c",
               "network_label":"added_network"
            }
         ]
      }
   ]
}</programlisting>
                    </step>
                  </procedure>
                  <sidebar>
                    <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_virt_interfaces_for_server"/>
                    </para>
                  </sidebar>
               </section>
               <section xml:id="curl_create_virt_interface_xml">
                  <title>XML Request and Response</title>
                  <procedure>
                    <title>To create a virtual interface and request an XML response</title>
                    <step>
                        <para>To create a virtual interface, you must specify the server ID in the request URI, and include a
                            request body that specifies the network ID for which you want to create a virtual interface. </para>
                        <para>For example, issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2.xml \
      -X POST \
      -H "Content-Type: application/xml" \
      -H "Accept: application/xml" \
      -H "X-Auth-Token: $token" \
      -d '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;virtual_interface network_id="<replaceable>network_id</replaceable>"/&gt;'</programlisting>
                        <para>
                           <emphasis role="bold">Arguments:</emphasis>
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                 <parameter>instance_id</parameter>. The ID of the server instance to which you want to
                                    connect the virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                            </listitem>
                            <listitem>
                                <para>
                                 <parameter>network_id</parameter>. The ID of the network for which you want to create a
                                    virtual interface. You copied this ID in <xref linkend="list_networks2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <programlisting language="json"><?db-font-size 65%?>
                            &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;virtual_interfaces xmlns="http://docs.openstack.org/compute/api/v1.1"&gt;
    &lt;virtual_interface id="24293921-e8fe-4f93-ac52-b8cc08435d00"
        mac_address="FE:ED:FA:00:0D:13"&gt;
        &lt;ip_address address="1.1.1.129"
            network_id="6d17d84a-9513-4c4c-bf5a-c2d5c0794292"
            network_label="added_network"/&gt;
    &lt;/virtual_interface&gt;
&lt;/virtual_interfaces&gt;
</programlisting>
                    </step>
                  </procedure>
                  <sidebar>
                    <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="list_virt_interfaces_for_server"/>
                    </para>
                  </sidebar>
               </section>
            </section>
         </section>
         <section xml:id="list_virt_interfaces_for_server">
            <title>Step 5. List Virtual Interfaces for a Server</title>
            <para>To validate that you created and connected the virtual interface to your server, you can list the virtual
            interfaces for your server. </para>

            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para>
                           <xref linkend="nova_list_virt_interfaces_for_server"/>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                           <xref linkend="curl_list_virt_interfaces_for_server"/>
                        </para>
                    </listitem>
                  </itemizedlist>
               </para>
            </sidebar>
            <section xml:id="nova_list_virt_interfaces_for_server">
               <title>List Virtual Interfaces for a Server with the nova Client</title>
               <procedure>
                  <title>To list virtual interfaces for a server with the nova client</title>
                  <step>
                    <para>Issue the following nova client command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ nova virtual-interface-list <replaceable>instance_id</replaceable>
                        </programlisting>
                     </para>
                    <para>
                        <emphasis role="bold">Positional argument:</emphasis>
                     </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                              <parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        <emphasis role="bold">Output:</emphasis>
                     </para>
                    <para>For any virtual interfaces that are connected to the specified server, the command returns the
                        network ID, MAC address, and IP addresses, as shown in the following output:</para>
                    <informalexample>
                        <screen><?db-font-size 65%?>+--------------------------------------+-------------------+---------------------------------------------------------------------------------------+
| id                                   | mac_address       | ip_addresses                                                                          |
+--------------------------------------+-------------------+---------------------------------------------------------------------------------------+
| 398f4189-5a60-4a5e-8a68-71e4fa014313 | 00:00:00:00:00:01 | label=private, network_id=39a43ded-7a9b-4a50-8633-e70d48363305, ip_address=172.16.0.2 |
| d5e3c9b6-bd5d-46c9-ba7b-114df3f37fb3 | 00:00:00:00:00:00 | label=mypriv, network_id=1f7920d3-0e63-4fec-a1cb-f7916671e8eb, ip_address=10.1.0.3      |
| d8a1baa8-3b51-4a74-9e33-f885e438a468 | 00:00:00:00:00:02 | label=public, network_id=69ebc6a6-27fc-4f47-aeca-de7c3b4685e7, ip_address=10.0.0.3    |
+--------------------------------------+-------------------+---------------------------------------------------------------------------------------+
                    </screen>
                    </informalexample>

                  </step>
                  <step>
                    <para>If you want to delete this interface later on, copy the ID for the virtual interface. </para>
                  </step>
               </procedure>
               <sidebar>
                  <para>
                     <emphasis role="bold">Next step:</emphasis>
                     <xref linkend="delete_virt_interface"/>
                  </para>
               </sidebar>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_list_virt_interfaces_for_server">
               <title>List Virtual Interfaces for a Server with cURL</title>
               <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
               <section xml:id="curl_list_virt_interfaces_json">
                  <title>JSON Request and Response</title>
                  <procedure>
                    <title>To list virtual interfaces for a server and request a JSON response</title>
                    <step>
                        <para>Issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2  \
       -X GET \
       -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                        <para>
                           <emphasis role="bold">Argument:</emphasis>
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                 <parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                    list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>

                        <programlisting language="json"><?db-font-size 65%?>
                            {
    "virtual_interfaces": [
        {
            "id": "a589b11b-cd51-4274-8ec0-832ce799d156", 
            "ip_addresses": [
                {
                    "address": "2001:4800:7810:0512:d87b:9cbc:ff04:850c", 
                    "network_id": "ba122b32-dbcc-4c21-836e-b701996baeb3", 
                    "network_label": "public"
                }, 
                {
                    "address": "64.49.226.149", 
                    "network_id": "ba122b32-dbcc-4c21-836e-b701996baeb3", 
                    "network_label": "public"
                }
            ], 
            "mac_address": "BC:76:4E:04:85:0C"
        }, 
        {
            "id": "de7c6d53-b895-4b4a-963c-517ccb0f0775", 
            "ip_addresses": [
                {
                    "address": "192.168.0.2", 
                    "network_id": "f212726e-6321-4210-9bae-a13f5a33f83f", 
                    "network_label": "superprivate_xml"
                }
            ], 
            "mac_address": "BC:76:4E:04:85:20"
        }, 
        {
            "id": "e14e789d-3b98-44a6-9c2d-c23eb1d1465c", 
            "ip_addresses": [
                {
                    "address": "10.181.1.30", 
                    "network_id": "3b324a1b-31b8-4db5-9fe5-4a2067f60297", 
                    "network_label": "private"
                }
            ], 
            "mac_address": "BC:76:4E:04:81:55"
        }
    ]
}
</programlisting>
                    </step>
                    <step>
                        <para>If you want to delete this interface later on, copy the ID for the virtual interface. </para>
                    </step>
                  </procedure>
                  <sidebar>
                    <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="delete_virt_interface"/>
                    </para>
                  </sidebar>
               </section>
               <section xml:id="curl_list_virt_interfaces_xml">
                  <title>XML Request and Response</title>

                  <procedure>
                    <title>To list virtual interfaces for a server and request a XML response</title>
                    <step>
                        <para>Issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2.xml  \
       -H "Content-Type: application/xml" \
       -H "Accept: application/xml" \
       -X GET \
       -H "X-Auth-Token: $token" </programlisting>
                        <para>
                           <emphasis role="bold">Argument:</emphasis>
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                 <parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                    list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para>
                           <emphasis role="bold">Output:</emphasis>
                        </para>
                        <programlisting language="xml"><?db-font-size 65%?>
                            &lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;virtual_interfaces xmlns="http://docs.openstack.org/compute/api/v1.1"&gt;
    &lt;virtual_interface id="a589b11b-cd51-4274-8ec0-832ce799d156" mac_address="BC:76:4E:04:85:0C"&gt;
        &lt;ip_address network_id="ba122b32-dbcc-4c21-836e-b701996baeb3" network_label="public" address="2001:4800:7810:0512:d87b:9cbc:ff04:850c" /&gt;
        &lt;ip_address network_id="ba122b32-dbcc-4c21-836e-b701996baeb3" network_label="public" address="64.49.226.149" /&gt;
    &lt;/virtual_interface&gt;
    &lt;virtual_interface id="de7c6d53-b895-4b4a-963c-517ccb0f0775" mac_address="BC:76:4E:04:85:20"&gt;
        &lt;ip_address network_id="f212726e-6321-4210-9bae-a13f5a33f83f" network_label="superprivate_xml" address="192.168.0.2" /&gt;
    &lt;/virtual_interface&gt;
    &lt;virtual_interface id="e14e789d-3b98-44a6-9c2d-c23eb1d1465c" mac_address="BC:76:4E:04:81:55"&gt;
        &lt;ip_address network_id="3b324a1b-31b8-4db5-9fe5-4a2067f60297" network_label="public" address="10.181.1.30" /&gt;
    &lt;/virtual_interface&gt;
&lt;/virtual_interfaces&gt;</programlisting>
                    </step>
                    <step>
                        <para>If you want to delete this interface later on, copy the ID for the virtual interface. </para>
                    </step>
                  </procedure>
                  <sidebar>
                    <para>
                        <emphasis role="bold">Next step:</emphasis>
                        <xref linkend="delete_virt_interface"/>
                    </para>
                  </sidebar>
               </section>
            </section>

         </section>
         <section xml:id="delete_virt_interface">
            <title>Step 6. Delete a Virtual Interface from a Server</title>
            <para>If your server no longer needs the virtual interface, you can delete and detach it from the server. </para>
            <para>To delete and detach your virtual interface from a server, you need the ID of your server instance and the ID
            for the virtual interface. </para>

            <para>After you delete the virtual interface, it no longer appears in the list of virtual interfaces for your
            server.</para>
            <sidebar>
               <para>
                  <emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para>
                           <xref linkend="nova_delete_vir_interface"/>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                           <xref linkend="curl_delete_vir_interface"/>
                        </para>
                    </listitem>
                  </itemizedlist>
               </para>
            </sidebar>

            <section xml:id="nova_delete_vir_interface">
               <title>Delete a Virtual Interface with the nova Client</title>
               <procedure>
                  <title>To delete a virtual interface with the nova client:</title>
                  <step>
                    <para>Issue the following command:</para>
                    <programlisting language="bash" role="gutter: false">
                        $ nova virtual-interface-delete <replaceable>instance_id</replaceable> 
                        <replaceable>interface_id</replaceable>
                     </programlisting>
                    <para>
                        <emphasis role="bold">Positional arguments:</emphasis>
                     </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                              <parameter>instance_id</parameter>. The ID of the server instance from which you want to
                                detach the virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                        <listitem>
                            <para>
                              <parameter>interface_id</parameter>. The ID of the virtual interface that you want to
                                delete. You copied this ID in <xref linkend="list_virt_interfaces_for_server"/>.</para>
                        </listitem>
                    </itemizedlist>
                  </step>
                  <step>
                    <para>Issue the following nova client command to determine if your virtual interface was deleted:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                            $ nova virtual-interface-list <replaceable>instance_id</replaceable>
                        </programlisting>
                     </para>
                    <para>
                        <emphasis role="bold">Positional argument:</emphasis>
                     </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                              <parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                list virtual interfaces. </para>
                        </listitem>
                    </itemizedlist>
                    <para>After the virtual interface is deleted, it no longer appears in the list of virtual interfaces. See
                            <xref linkend="list_virt_interfaces_for_server"/>.</para>
                  </step>
               </procedure>
            </section>
            <?hard-pagebreak?>
            <section xml:id="curl_delete_vir_interface">
               <title>Delete a Virtual Interface with cURL</title>
               <procedure>
                  <title>To delete a virtual interface with cURL:</title>
                  <step>
                    <para>Issue the following command. In the command, specify the ID for the server that you want to
                        delete.</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 60%?>
                        $ curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2/$interface_id \
     -X DELETE \
     -H "X-Auth-Token: $token"</programlisting>
                    <para>
                        <emphasis role="bold">Arguments:</emphasis>
                     </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                              <parameter>instance_id</parameter>. The ID of the server instance from which you want to
                                detach the virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                        <listitem>
                            <para>
                              <parameter>interface_id</parameter>. The ID of the virtual interface that you want to
                                delete. You copied this ID in <xref linkend="list_virt_interfaces_for_server"/>.</para>
                        </listitem>
                    </itemizedlist>
                    <note>
                        <para>Because the delete server method does not return a JSON object, you omit the following code
                            from the command:</para>
                        <programlisting language="bash" role="gutter: false">| python -m json.tool</programlisting>
                        <para>If you include it, the command runs successfully, but you get the following message:</para>
                        <programlisting language="bash" role="gutter: false">No JSON object could be decoded.</programlisting>
                    </note>
                    <para>To see the status code that is returned from the request, you use the <option>-i</option> option on
                        the cURL command. This option shows the HTTP header in the output. </para>
                    <para>If the delete operation was successful, the HTTP header shows the <returnvalue>204</returnvalue>
                        status code, as shown in the following output:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>HTTP/1.1 204 No Content
Date: Thu, 16 Aug 2012 17:19:53 GMT
Content-Length: 0
Content-Type: application/json
X-Compute-Request-Id: req-3bdafeb2-d4b1-41c3-ab19-d310f3f270d3
Server: Jetty(8.0.y.z-SNAPSHOT)</programlisting>
                  </step>
                  <step>
                    <para>Issue the following cURL command to determine if your virtual interface was deleted:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?>
                        $ curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2  \
       -X GET \
       -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                    <para>
                        <emphasis role="bold">Argument:</emphasis>
                     </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                              <parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                    </itemizedlist>
                    <para>After the virtual interface is deleted, it no longer appears in the list of virtual interfaces.
                    </para>
                  </step>
               </procedure>
            </section>
         </section>
      </section>
   </chapter>
    <glossary role="auto"/>
</book>
